(window["webpackJsonptbarlow12-personal-website"]=window["webpackJsonptbarlow12-personal-website"]||[]).push([[0],{163:function(e,t,n){var o={"./blog/posts-full.json":22,"./blog/posts-preview.json":38,"./pages/books.json":164,"./pages/home.json":165,"./pages/interests.json":166,"./pages/projects.json":167,"./pages/resume.json":168};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}a.keys=function(){return Object.keys(o)},a.resolve=s,e.exports=a,a.id=163},164:function(e){e.exports=JSON.parse('{"content":"\\n# Books\\n\\nThese are some of my favorite books I\'ve read recently. When I get some more time, I\'d like to write out some of the insights I got from them, because there have been some great ones. Thanks to my friends for all the recommendations and Scribd for making it so easy to find great books!\\n\\n## Recent Favorites\\n- How Will You Measure Your Life - Clayton M. Christensen\\n- Atomic Habits - James Clear\\n- Grit: The Power of Passion and Perserverance - Angela Duckworth\\n- Algorithms to Live By - Tom Griffiths\\n- Essentialism - Greg McKeown\\n- The 5 AM Club - Robin Sharma\\n- Designing Your Life - Dave Evans\\n- You Need a Budget - Jesse Mecham\\n- Creativity, Inc. - Amy Wallace\\n- Drive - Daniel H. Pink\\n- Quiet - Susan Cain\\n- Shoe Dog - Phil Knight\\n- The Screwtape Letters - C.S. Lewis\\n- Mere Christianity - C.S. Lewis\\n- The Mormon Way of Doing Business - Jeff Benedict\\n- Unbroken - Laura Hillenbrand\\n- Hit Refresh - Satya Nadella\\n- The Power to Get Things Done (Whether You Like It or Not) - Chris Cooper\\n","data":{"title":"Books","path":"/books"},"isEmpty":false,"excerpt":""}')},165:function(e){e.exports=JSON.parse('{"content":"\\n# About Me\\n\\n## I\'m Tanner Barlow, and I love to write code.\\n\\nI\'ve really enjoyed working in open-source as a part of my job as a Software Engineer at Microsoft and have had the opportunity to work on some really cool projects. I\'m most passionate about building scalable microservices (often times using Serverless technologies) as well as developer tools. Lately, I\'ve been working a lot with Node.js (specifically, TypeScript) and Python, but also enjoy working with C#, Java and pretty much any other language you can think of. I love writing software to make my life and the lives of others easier. I\'m a big fan of cheeseburgers, basketball (Go Jazz) and audiobooks. Feel free to contact me through [GitHub](https://github.com/tbarlow12) or [LinkedIn](https://www.linkedin.com/in/tannerbarlow/) with any other questions.\\n\\nFeel free to play around with the integrated terminal below (run `help` to see available commands). Use it as your navigation around my site, or just use the links to my left. Thanks for visiting!\\n","data":{"title":"About Me"},"isEmpty":false,"excerpt":""}')},166:function(e){e.exports=JSON.parse('{"content":"\\n# Personal Interests\\n\\nWhen I\'m not writing code, I love hanging out with my best friend. She happens to also be my wife, so that works out pretty well. I also love playing cars, tag, hide-and-seek, wrestling, etc. with our 2-year-old son. He has a little brother on the way and we couldn\'t be more excited.\\n\\nI also love playing basketball, eating cheeseburgers and binge-watching The Office for the 27th time through (with a healthy mix of Parks and Rec). I can quote The Sandlot start to finish, and can rattle off most of John Stockton\'s career stat line. ","data":{"title":"Interests","path":"/interests"},"isEmpty":false,"excerpt":""}')},167:function(e){e.exports=JSON.parse('{"content":"\\n# Projects\\n\\n## Contributions to Popular Open-Source Projects\\n\\n### Serverless Framework\\n\\nThe Serverless framework is a CLI tool for deploying Serverless applications. The support for the [Azure Functions plugin](https://github.com/serverless/serverless-azure-functions) was lacking (hadn\'t been a code commit in ~2 years), and there were several companies using Azure that were interesting in using the framework to deploy their workflows. Our team re-wrote the existing plugin to account for changes to Azure Functions and make the tool more robust for enterprise use. This has been one of my favorite projects that I have been involved in.\\n\\n#### Links\\n\\n  - [My contributions](https://github.com/serverless/serverless-azure-functions/pulls?utf8=%E2%9C%93&q=is%3Amerged+is%3Apr+author%3Atbarlow12+) to the plugin\\n  - [Contributor graph](https://github.com/serverless/serverless-azure-functions/graphs/contributors)\\n  - [My contributions](https://github.com/serverless/serverless-azure-functions/graphs/contributors) to the core framework\\n  - [Blog post](https://serverless.com/blog/serverless-azure-functions-v1) for Serverless website\\n\\n### VoTT (Visual Object Tagging Tool)\\n\\n[VoTT](https://github.com/Microsoft/VoTT) is a popular open-source tool for the labeling of image and video data for computer vision model training. Our team [re-wrote the application](https://github.com/microsoft/VoTT/blob/master/CHANGELOG.md) to make it more extensible and reliable, as well as add many features that didn\'t previously exist.\\n\\n#### Links\\n- [My contributions](https://github.com/microsoft/VoTT/pulls?utf8=%E2%9C%93&q=is%3Amerged+is%3Apr+author%3Atbarlow12+) to VoTT \\n- [Contributor graph](https://github.com/microsoft/VoTT/graphs/contributors)\\n\\n### Cloud Custodian\\n\\n- [My contributions](https://github.com/cloud-custodian/cloud-custodian/pulls?utf8=%E2%9C%93&q=is%3Amerged+is%3Apr+author%3Atbarlow12+) to Cloud Custodian\\n\\n## Recent Personal Projects\\n\\n### VSCode-Inspired Splash Page\\n\\nPersonal website with integrated terminal and VS Code styles\\n\\n- [Repo](https://github.com/tbarlow12/tbarlow12.github.io)\\n- App content driven by single [manifest file](https://github.com/tbarlow12/tbarlow12.github.io/blob/dev/src/react/createManifest.ts)\\n- Content auto-generated from Markdown and published to master branch via [GitHub workflow](https://github.com/tbarlow12/tbarlow12.github.io/blob/dev/.github/workflows/deploy.yml)\\n\\n### TaskBoardAssistant\\n\\nRule engine that allows people to set up policies for their tasks boards like Trello.\\n\\n- [Repo](https://github.com/tbarlow12/task-board-assistant)\\n- [NuGet Package](https://www.nuget.org/packages/TaskBoardAssistant)\\n- [Example Policies](https://github.com/tbarlow12/task-board-assistant-policies)\\n","data":{"title":"Projects","path":"projects"},"isEmpty":false,"excerpt":""}')},168:function(e){e.exports=JSON.parse('{"content":"\\n# Resume\\n\\n## Skills\\n- Python, C#, Node.js, TypeScript, JavaScript, Java, React, Serverless, NLP, ML/AI\\n\\n## Work Experience\\n\\n### **Software Engineer 2** \u2013 *Microsoft (Commercial Software Engineering), Redmond, WA, Feb 2019 - Present*\\n- [Top contributor](https://github.com/serverless/serverless-azure-functions/graphs/contributors) to the Serverless Framework Azure Functions plugin. Added support for running locally, rolling back code/infrastructure deployment, skipping of identical deployment, Linux support, Python support and [more](https://github.com/serverless/serverless-azure-functions/pulls?utf8=%E2%9C%93&q=is%3Amerged+is%3Apr+author%3Atbarlow12+)\\n- [#2 contributor](https://github.com/microsoft/VoTT/graphs/contributors) to VoTT, an open-source tool for image and video annotation. Designed, architected and implemented [many features](https://github.com/Microsoft/VoTT/pulls?utf8=%E2%9C%93&q=is%3Apr+is%3Amerged+author%3Atbarlow12), including the tag input component, dynamic help menu & cloud connections\\n\\n### **Software Engineer** \u2013 *Microsoft (Commercial Software Engineering), Redmond, WA, Jan 2018 \u2013 Feb 2019*\\n- Contributed [multiple features to Cloud Custodian](https://github.com/cloud-custodian/cloud-custodian/pulls?utf8=%E2%9C%93&q=is%3Apr+is%3Amerged+author%3Atbarlow12+), an open-source CLI tool for cloud subscription governance, including real-time metric filters, scheduled operations, and multi-subscription support\\n- Designed and implemented features for a [cloud-agnostic serverless orchestrator](https://github.com/Microsoft/cloud-scanner), used for monitoring cloud resources\\n- Developed POC voice-driven Android application for hands-free control of stationary bicycle\\n\\n### **Software Engineer Intern** \u2013 *Microsoft (Windows Localization), Redmond, WA, May 2016 \u2013 Aug 2017*\\n- Designed and implemented big data pipeline and k-means clustering analysis of Windows telemetry. Assigned score for the \u201crepresentation factor\u201d of each device in order to amplify feedback of highly representative users\\n- Created CLI tool to automate process of identifying actionable feedback from Windows users\\n\\n### **Software Developer Intern** \u2013 *FamilySearch, Salt Lake City, UT, May 2015 \u2013 Aug 2015*\\n- Enhanced and maintained CLI tool for running bulk operations on database of historical places\\n- Designed and implemented GUI to run on top of existing tool for users that struggled using the CLI\\n\\n\\n## Additional Projects\\n\\n### [VSCode-Themed Personal Site](https://github.com/tbarlow12/tbarlow12.github.io)\\n- VSCode-inspired personal website, including an integrated terminal\\n\\n### [TaskBoardAssistant](https://github.com/tbarlow12/task-board-assistant)\\n- Policy engine for automated management of task boards. Published as NuGet package.\\n\\n### [FoolTheAI](https://github.com/tbarlow12/fool-the-ai-api/tree/master/fool-the-ai-api)\\n- \u201cHuman-in-the-loop\u201d verification of crowd-sourced data collection for computer vision models. Users take pictures of objects and try to \u201cfool\u201d the model. Goal was to collect noisy training data for SeeingAI application\\n\\n### [Guide](https://github.com/tbarlow12/guide-api) \\n- Mobile application for creating and consuming location-specific content (crowd-sourced audio tour guide). Sole developer for backend of application, including the API, cloud infrastructure and content delivery\\n\\n### [LearnItYourWay](https://github.com/tbarlow12/Learn-It-Your-Way)\\n- Flask API for uploading a simple dataset, schedule a job to train a model, and then returning an endpoint to the user which can then be referenced to make future predictions\\n\\n## Other Experience\\n\\n- PyCon Attendee 2018 & 2019 (participated in PyCon Dev Sprints in 2018)\\n- Co-Founder and Director of Technology for HackTheU (University of Utah official hackathon)\\n- Founder and President of Computer Programmers at the U of U (CPU of U)\\n- Microsoft Intern Ambassador (Aug 2016 \u2013 July 2017) & Student Partner (Jan 2016 \u2013 July 2017) \\n\\n## Education \\n\\n- Bachelor of Science: Computer Science\\n- University of Utah, College of Engineering, Salt Lake City, UT\\n- Cumulative GPA: 3.75/4.00\\n\\n### Awards\\n- Honors at Entrance Scholarship\\n- Everton Scholarship\\n- Haglund Scholarship\\n- 8-time Dean\u2019s list\\n\\n[Download PDF](https://github.com/tbarlow12/tbarlow12.github.io/raw/dev/resources/documents/resume.pdf)\\n","data":{"title":"Resume"},"isEmpty":false,"excerpt":""}')},174:function(e,t){},176:function(e,t){},210:function(e,t,n){"use strict";n.r(t);var o,a=n(0),s=n.n(a),i=n(64),r=n.n(i),l=(n(79),n(41)),h=n(14),c=(n(80),n(81),n(5)),u=n(10),d=n(11),m=n(65),p=n.n(m);function f(e){return s.a.createElement(p.a,{source:e.content,linkTarget:"_blank",escapeHtml:!1})}function g(e,t,o,a){return function(){var i=n(163)("./".concat(e,"/").concat(t,".json"));return s.a.createElement("div",{className:"app-page-".concat(t)},o,s.a.createElement(f,{content:i.content}),a)}}!function(e){e.PAGE="pages",e.BLOG="blog/posts"}(o||(o={}));var w=function(){function e(t,n){Object(u.a)(this,e),this.options=t,this.parent=n,this.children=void 0,t.component||(this.options.component=g(t.pageType||o.PAGE,t.name,t.beforeContent,t.afterContent)),this.children=[],t.children&&this.addChildren(t.children)}return Object(d.a)(e,[{key:"getOptions",value:function(){return this.options}},{key:"getName",value:function(){return this.options.name}},{key:"getPath",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e&&this.options.nonExact){var t=this.options,n=t.path,o=t.name;return n.substr(0,n.indexOf(":"))+o}return this.options.path}},{key:"getExact",value:function(){return!this.options.nonExact}},{key:"getComponent",value:function(){return this.options.component}},{key:"getParent",value:function(){return this.parent}},{key:"getChildren",value:function(){return this.children}},{key:"addChildren",value:function(t){var n=!0,o=!1,a=void 0;try{for(var s,i=t[Symbol.iterator]();!(n=(s=i.next()).done);n=!0){var r=s.value;this.children.push(new e(r,this))}}catch(l){o=!0,a=l}finally{try{n||null==i.return||i.return()}finally{if(o)throw a}}}}]),e}(),y={home:"fas fa-home",blog:"fas fa-keyboard",github:"fab fa-github",linkedin:"fab fa-linkedin",resume:"fas fa-file-alt",tasks:"fas fa-tasks",code:"fas fa-code-branch",education:"fas fa-user-graduate",basketball:"fas fa-basketball-ball",volunteer:"fas fa-hands-helping",terminal:"fas fa-terminal",sun:"fas fa-sun",moon:"fas fa-moon",trash:"far fa-trash-alt",book:"fas fa-book",none:""},b=n(22),v=n(38),k=n(169),I=function(){function e(){Object(u.a)(this,e)}return Object(d.a)(e,null,[{key:"getPreviews",value:function(){return this.getBlogPosts(v)}},{key:"getBlogPostPath",value:function(e){return e.data.path?e.data.path:(new k).update(e.data.title).digest("hex").substr(0,8)}},{key:"getFullPost",value:function(e){return b[e]}},{key:"getBlogPosts",value:function(e){return e.sort((function(e,t){return new Date(e.data.date)<new Date(t.data.date)?1:-1}))}}]),e}();function x(){return s.a.createElement("div",{className:"blog-page"},s.a.createElement("h1",null,"Blog"),I.getPreviews().map((function(e){return s.a.createElement("div",{className:"blog-page-preview"},function(e){return s.a.createElement("div",{className:"blog-post-preview"},e.data.thumbnail&&s.a.createElement("div",{className:"blog-post-preview-thumbnail"},s.a.createElement("img",{src:"/content/images/".concat(e.data.thumbnail),alt:""})),s.a.createElement("div",{className:"blog-post-preview-title"},s.a.createElement(h.b,{title:e.data.title,to:"/blog/".concat(e.data.path)},e.data.title)),s.a.createElement("div",null,new Date(e.data.date).toDateString()),s.a.createElement("div",null,e.data.preview),s.a.createElement("div",{className:"blog-post-preview-content"},s.a.createElement(f,{content:e.content})))}(e))})))}function T(e){var t,n=e.location.pathname.match(/blog\/(.*)/);if(!n)throw new Error("Invalid URL");t=n[1];var o=I.getFullPost(t);return s.a.createElement("div",{className:"blog-post-page"},s.a.createElement("div",{className:"blog-post-page-title"},s.a.createElement("h1",null,o.data.title)),s.a.createElement("div",{className:"blog-post-page-date"},s.a.createElement("h4",null,new Date(o.data.date).toDateString())),o.data.preview&&s.a.createElement("div",{className:"blog-post-page-preview"},o.data.preview),s.a.createElement("div",null,o.data.preview),s.a.createElement("div",{className:"blog-post-page-content"},s.a.createElement(f,{content:o.content})))}var A=new w({title:"About Me",name:"home",path:"/",icon:y.home,children:[{title:"Blog",name:"blog",path:"/blog",icon:y.blog,component:x,children:Object.keys(b).map((function(e){return{title:"Blog Post",name:e,path:"/blog/:blogPost",component:T,icon:y.none,nonExact:!0}}))},{title:"Projects",name:"projects",path:"/projects",icon:y.code},{title:"Resume",name:"resume",path:"/resume",icon:y.resume},{title:"Interests",name:"interests",path:"/interests",icon:y.basketball},{title:"Books",name:"books",path:"/books",icon:y.book}]});function S(){return s.a.createElement("div",{className:"app-main-content"},s.a.createElement(c.c,null,function e(t,n,o){if(o.has(t.getPath()))return;o.add(t.getPath());var a=t.getExact()?s.a.createElement(c.a,{path:t.getPath(),exact:!0,component:t.getComponent()}):s.a.createElement(c.a,{path:t.getPath(),component:t.getComponent()});n.push(a);var i=!0;var r=!1;var l=void 0;try{for(var h,u=t.getChildren()[Symbol.iterator]();!(i=(h=u.next()).done);i=!0){var d=h.value;e(d,n,o)}}catch(m){r=!0,l=m}finally{try{i||null==u.return||u.return()}finally{if(r)throw l}}return n}(A,[],new Set),s.a.createElement(c.a,{component:g(o.PAGE,"home")})))}var j=n(71);function E(e){var t=[A.getOptions()].concat(Object(j.a)(A.getChildren().map((function(e){return e.getOptions()})))),n=[{title:"GitHub",link:"https://github.com/tbarlow12",icon:y.github},{title:"LinkedIn",link:"https://www.linkedin.com/in/tannerbarlow/",icon:y.linkedin}],o=[{title:"Terminal",icon:y.terminal,action:e.toggleTerminal}];return s.a.createElement("ul",{className:"app-sidebar"},s.a.createElement("div",{className:"app-sidebar-links"},t.map((function(e){return s.a.createElement("li",{className:"app-sidebar-item"},s.a.createElement(h.b,{to:e.path},s.a.createElement("i",{className:"app-sidebar-item-icon ".concat(e.icon)})))})),n.map((function(e){return s.a.createElement("li",{className:"app-sidebar-item"},s.a.createElement("a",{href:e.link,target:"_blank",rel:"noopener noreferrer"},s.a.createElement("i",{className:"app-sidebar-item-icon ".concat(e.icon)})))}))),s.a.createElement("div",{className:"app-sidebar-tools"},o.map((function(e){return s.a.createElement("li",{className:"app-sidebar-item",onClick:function(){return e.action()}},s.a.createElement("i",{className:"app-sidebar-item-icon ".concat(e.icon)}))}))))}var C=n(73),P=n(68),z=n(20),W=n(72),M=n(69),N=n.n(M),O=function(){function e(){Object(u.a)(this,e),this.manifest=void 0,this.manifest=A}return Object(d.a)(e,[{key:"ls",value:function(e,t){try{return this.getManifest(e,t).getChildren().map((function(e){return e.getName()})).join(" ")}catch(n){return"Invalid command ".concat(n)}}},{key:"transformPath",value:function(e,t){return this.getManifest(e,t).getPath(!0).replace("//","/")}},{key:"getManifest",value:function(e,t){if("~"===t)return this.manifest;t&&t.startsWith("~/")&&(e="",t=t.substr(2));var n=e.split("/"),o=t?t.split("/"):[];n=n.concat(o);var a=this.manifest,s=!0,i=!1,r=void 0;try{for(var l,h=function(){var n=l.value;if(".."===n){if(!a.getParent())throw new Error("Invalid path: ".concat(e+t));a=a.getParent()}var o=a.getChildren().find((function(e){return e.getName()===n}));o&&(a=o)},c=n[Symbol.iterator]();!(s=(l=c.next()).done);s=!0)h()}catch(u){i=!0,r=u}finally{try{s||null==c.return||c.return()}finally{if(i)throw r}}return a}}]),e}(),D=function(e){function t(e){var n;return Object(u.a)(this,t),(n=Object(C.a)(this,Object(P.a)(t).call(this,e))).structureService=void 0,n.commands={echo:{description:"Echo a passed string.",usage:"echo <string>",fn:n.echo.bind(Object(z.a)(n))},ls:{description:"View available navigation options",usage:"ls",fn:n.ls.bind(Object(z.a)(n))},cd:{description:"Navigate to another page",usage:"cd <string>",fn:n.cd.bind(Object(z.a)(n))},kill:{description:"Close terminal",usage:"kill",fn:n.props.closeTerminal}},n.getPath=function(e){return"/"===e?"~":"~".concat(e)},n.structureService=new O,n.state={open:e.open},n}return Object(W.a)(t,e),Object(d.a)(t,[{key:"componentDidUpdate",value:function(){this.props.open!==this.state.open&&this.setState({open:this.props.open})}},{key:"render",value:function(){var e=this.props.location;return s.a.createElement("div",{className:"app-main-footer"},this.props.open&&s.a.createElement("div",{className:"app-main-footer-container"},s.a.createElement("div",{className:"app-main-footer-header"},s.a.createElement("div",{className:"app-main-footer-header-tabs"},s.a.createElement("div",{className:"app-main-footer-header-tabs-title"},"TERMINAL")),s.a.createElement("div",{className:"app-main-footer-header-tools"},s.a.createElement("div",{className:"app-main-footer-header-tools-trash"},s.a.createElement("i",{className:"".concat(y.trash),onClick:this.props.closeTerminal})))),s.a.createElement(N.a,{commands:this.commands,welcomeMessage:"Run 'help' for available commands, 'kill' to close",promptLabel:"user@TBarlow:".concat(this.getPath(e.pathname)),promptLabelStyle:{color:"#66CCCC"},noHistory:!0,styles:{maxHeight:"300px"}})))}},{key:"ls",value:function(){var e=this.props.location.pathname,t=arguments[0];return this.structureService.ls(e,t)}},{key:"echo",value:function(){return"".concat(Array.from(arguments).join(" "))}},{key:"cd",value:function(){var e=arguments[0],t=this.props.location;try{var n=this.structureService.transformPath(t.pathname,e);this.props.history.push(n)}catch(o){return"Invalid path: ".concat(t.pathname+e)}}}]),t}(s.a.Component),F=Object(c.f)(D),R=n(70);function B(){return s.a.createElement("div",{className:"app-main-header"},s.a.createElement("div",{className:"app-main-header-title"},s.a.createElement("h1",null,"Tanner Barlow")),s.a.createElement("div",{className:"app-main-header-subtitle"}))}var L=function(){var e=Object(a.useState)(!R.isMobile),t=Object(l.a)(e,2),n=t[0],o=t[1],i=Object(a.useState)(!0),r=Object(l.a)(i,2),c=r[0],u=r[1];return s.a.createElement("div",{className:"app"},s.a.createElement(h.a,null,s.a.createElement(E,{toggleTerminal:function(){return o(!n)},toggleTheme:function(){return u(!c)},darkTheme:c}),s.a.createElement("div",{className:"app-main"},s.a.createElement(B,null),s.a.createElement(S,null),s.a.createElement(F,{open:n,closeTerminal:function(){return o(!1)}}))))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));n(209);r.a.render(s.a.createElement(L,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))},22:function(e){e.exports=JSON.parse('{"bucketlist":{"content":"\\nThis is an ever-growing, ever-changing list of things I would like to accomplish as a software engineer, both in my professional and personal life.\\n\\n- [ ] Find an interesting open-source project and submit a PR within 24 hours \\n- [ ] File a patent for software you wrote (at work or otherwise)\\n- [x] Write a REST API\\n- [x] Write a serverless function\\n- [x] Containerize an application\\n- [x] Make your own website\\n- [ ] Work pager duty\\n- [x] Participate in a hackathon\\n- [x] Travel to attend a major software conference\\n- [ ] Travel to speak or present at a major software conference\\n- [x] Find a senior developer mentor\\n- [ ] Mentor a junior developer\\n- [ ] Submit code to these online package managers\\n    - [x] PyPI\\n    - [x] NuGet\\n    - [ ] NPM\\n- [ ] Have a stranger submit a meaningful PR to an open-source project you created\\n- [ ] Pull an all-nighter coding on a personal project\\n- [x] Write a piece of software just for you that you actually use\\n- [ ] Reading list: \\n    - [ ] [Clean Code](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882)\\n    - [x] [The Night Watch](https://www.usenix.org/system/files/1311_05-08_mickens.pdf)\\n    - [x] [Cracking the Coding Interview](https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850/ref=dp_ob_title_bk)\\n    - [ ] [Design Patterns: Elements of Reusable Object-Oriented Software](https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612)\\n    - [ ] [Code: The Hidden Language of Computer Hardware and Software](https://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319)\\n    - [ ] [Refactoring: Improving the Design of Existing Code](https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672)\\n    - [ ] [The Pragmatic Programmer](https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X)\\n    - [ ] [Code Complete: A Practical Handbook of Software Construction](https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670/ref=pd_lpo_sbs_14_t_1?_encoding=UTF8&psc=1&refRID=K75WSC0JK6J62XWX4AHR)\\n    - [x] [Real Programmers Don\'t Use PASCAL](http://web.mit.edu/humor/Computers/real.programmers)\\n- [x] Work with a dataset larger than one petabyte\\n- [x] Write your own ML model using nothing but a math library (numpy or equivalent)\\n- [x] Throw away code for a project and start from scratch\\n- [ ] Work in an open-space environment\\n- [x] Work in an office/cubicle environment\\n- [x] Work for a tech giant\\n- [ ] Work for a startup with < 10 engineers\\n- [ ] Work as a manager for a dev team\\n- [ ] Write your favorite game in any language\\n- [x] Write a mobile app specifically for one platform\\n- [ ] Write a cross-platform mobile app\\n- [ ] Work as a freelancer\\n- [ ] Teach a kid to code\\n- [x] Teach a class on programming\\n- [ ] Write and publish a technical book\\n- [ ] Receive a job offer without an interview\\n- [ ] Publish a technical tutorial\\n- [ ] Answer a question on StackOverflow\\n- [ ] Have an answer upvoted 100+ times on StackOverflow\\n- [ ] Write a program using strictly Vim or Emacs in the terminal\\n- [ ] Write a non-trivial program in:\\n    - [x] C\\n    - [x] MIPS\\n    - [ ] Go\\n    - [x] C++\\n    - [x] C#\\n    - [x] Node.js\\n    - [x] TypeScript\\n    - [x] Python\\n    - [x] Java\\n    - [x] Android\\n    - [ ] Swift\\n    - [ ] Rust\\n    - [ ] Elixir\\n    - [ ] Scala\\n- [ ] Write a program in a functional language\\n- [x] Write a program for a robot\\n- [ ] Work on software that requires government clearance\\n- [ ] Infiltrate a large system undetected\\n- [ ] Place top 5 in a Kaggle competition\\n- [x] Write a blog about your career ","data":{"title":"My Software Dev Bucket List","date":"2018-8-31","path":"bucketlist"},"isEmpty":false,"excerpt":""},"joiningmicrosoft":{"content":"\\nI\'ve had a few friends ask me what my journey to Microsoft was like and why I chose to work here. Microsoft, like the Yankees and black licorice, is one of those \\"love it or hate it\\" kind of things (I fall emphatically into the latter camp for both of those other two). Everyone has reasons or experiences that make them feel one way or the other. As for myself, I\'ve really enjoyed working at Microsoft, so I thought I\'d document a little bit of my journey and why I ended up where I did.\\n\\n## The Interview\\n\\nI first interviewed with Microsoft in 2015 for a summer internship. When they called me and asked me to fly out for a round of final interviews in Redmond, my wife and I saw it as a free trip to Seattle. In my head, I was nowhere near qualified to work at a place like that and had all but written myself off from the start. The [Imposter Syndrome](https://en.wikipedia.org/wiki/Impostor_syndrome) was as real as ever. But I had promised my wife earlier that year that I would take us some place out of Utah that summer for an internship of some kind, so I really did want it to work out.\\n\x3c!-- \\n![alt text](https://github.com/tbarlow12/tbarlow12.github.io/blob/dev/resources/images/Microsoft/sign.jpg?raw=true) --\x3e\\n\\nI didn\'t feel great about my interviews - a couple of them felt downright terrible. But I did try hard to explain my thought process and walk my interviewers through my solutions to the problems they presented. \\n\\nAfter our brains had become sufficiently scrambled through the 4-hour interview process, the recruiters took us to lunch at the Commons. When we came back from lunch, they handed out Microsoft hoodies and swag (pretty much a participation trophy for interviewing, but **score** nonetheless). I was just about to head out the door to go back to the hotel, intent on enjoying the rest of the weekend in Seattle with my sweet wife, when one of the recruiters pulled me aside.\\n\\nWe went into a nearby conference room with one of the other recruiters, where they explained that they had an offer on the table for me. Shock doesn\'t begin to describe what I was feeling. It was cool to see that they were genuinely excited for me. I think they were even more excited for me to tell my wife. \\n\\nOn principle, I wouldn\'t officially accept anything until I had talked to Kate first, so I told them I would send them an email later that day. I called Kate as soon as I left the building and could barely contain my excitement as I tried to explain what just happened, not really knowing the answer myself. We spent the night in downtown Seattle, fully able to relax and imagine what our summer would be like in this new place.\\n\\n\x3c!-- ![alt text](https://github.com/tbarlow12/tbarlow12.github.io/blob/dev/resources/images/Microsoft/seattle.jpg?raw=true) --\x3e\\n\\n## A New Intern\\n\\nThe day after I took my last final in May of 2016, we packed up our Highlander with everything we\'d need for the next 3 months and made the 12-hour drive to our summer home. Microsoft put us up in an apartment in Redmond, which was close enough to one of the buildings that I could schedule a shuttle to pick me up and take me to the office. I became friends with many of the shuttle drivers I met that summer and remain very close friends with a few of them to this day. I\'ve been to dinner with them, attended funerals of family members, and even stayed in one of their houses while I was looking for a place to stay for my family. Some of the finest people I\'ve ever had the chance to meet.\\n\\nI spent that first summer in building 109 of Microsoft\'s campus, working with the WDG Global Services Localization Data Insights team (kind of a mouthful). My project was to automate the process by which our team identified meaningful feedback, particularly when it came to localization issues in Windows. I was able to work with a few teams across Microsoft to create a system that utilized an internal big data platform and natural language processing/machine learning tools to process and identify feedback most likely to be actionable in order to pass it along to developers. \\n\\n\x3c!-- ![alt text](https://github.com/tbarlow12/tbarlow12.github.io/blob/dev/resources/images/Microsoft/project.jpg?raw=true) --\x3e\\n\\nIt solved a critical business need for the team, as they had previously been hiring sub-contractors to _read each piece of feedback, one by one_ and decide which ones were actionable. That may work for a smaller system, but for something like Windows, that\'s just not scalable. The project was a success, I learned a ton and had a blast doing it. For more detail on this project, check out my [blog post](/Microsoft-Summer2016/) written right after finishing for the summer. Of course, I enjoyed the many intern events and parties held for us... A private Ellie Goulding concert at the Space Needle where they hand out new Surface Books at the end wasn\'t anything to sneeze at... But the highlight for me was the learning and growing I was able to do, being surrounded by an amazing group of talented individuals that didn\'t mind taking the time to teach and mentor an intern.\\n\\n\x3c!-- ![alt text](https://github.com/tbarlow12/tbarlow12.github.io/blob/dev/resources/images/Microsoft/team.jpg?raw=true) --\x3e\\n\\nI accepted an offer to return to the same team the following summer. As these things go, there was a massive re-organization within the team, my manager left Microsoft to pursue a personal dream of civic engagement as the City of Seattle\'s new Open Data Program Manager, and I would be reporting directly to my previous skip-manager. Although I was very sad to hear my manager would be leaving, I was happy to still be working under someone I knew and respected a great deal. \\n\\n## Return of the Intern\\n\\nOur journey back to Redmond after a long school year was pretty much the same, aside from one major detail - my wife was 6 months pregnant. She was due on August 10th, just 13 days after I was scheduled to finish my internship. Microsoft was _extremely_ accomodating with us. They put us in an apartment that was literally a 6-minute bike ride from building 109. They told me that if anything came up, I should feel free to take time to be with her and not to worry about work. My recruiters even got us a bag of gifts for the baby from the Microsoft store. We really felt that they had our interests at heart and cared about our little family.\\n\\n\x3c!-- ![alt text](https://github.com/tbarlow12/tbarlow12.github.io/blob/dev/resources/images/Microsoft/baby.jpg?raw=true) --\x3e\\n\\nMy project during that second summer was very broad, more of a question to answer with no real guidance given on the implementation. I was free to take the project in whatever direction I saw fit. The question was \\"How do we identify influential communities of Windows users/devices so that we can weight their feedback more heavily?\\" These communities went much deeper than just \\"gamers, business users, mobile users, etc.\\" We already knew that for most devices. I wanted to find a way to use Windows telemetry to cluster devices together that actually *behaved* in a similar way, so that we could amplify the voice of Windows Insiders (users that receive Windows versions before they are released to the public) that more accurately represented that population.\\n\\nAt a 30,000 foot level, my approach was fairly straight forward: run k-means clustering on Windows devices within a locale (primary language used on device) and assign each device a score proportional to the size of the cluster and inversely proportional the device\'s distance from the centroid (higher score = big cluster and close to center). The problem became finding ways to run this efficiently on pedabytes of telemetry data and setting it up to run in an automated workflow. The systems we used had a timeout of 2 hours when running a script, so in order to give it time to finish, I was forced to break it up into smaller chunks of data and run many smaller scripts in parallel.\\n\\nThe project went well, and laid a foundation for future work in the area. But as with any probabilistic problem (especially when dealing with unsupervised learning), it\'s difficult to know when you\'ve found the right approach. Testing your solution can be just as hard as developing it in the first place. When it came down to it, 12 weeks just wasn\'t a lot of time to understand the problem, map out a solution, implement it by myself and verify the results. And when I say \\"by myself,\\" that\'s not to say I didn\'t receive a lot of help throughout the process. I just mean that no one else was _directly_ working on the project with me. I\'m confident that given a few more months, we would have come up with a solid approach to answer this question.\\n\\n## The Decision\\n\\nAt the end of the summer, I had some difficult decisions to make - whether or not to stay at Microsoft and, if I did stay, whether or not to stay with my current team. I really had enjoyed working with these people for the past two summers. I had learned a lot and was sure there was more to learn from them. But I also felt like broadening my horizons and looking at what other teams/companies had to offer. Two of the main things I was looking for were opportunities to challenge myself and grow, as well as a family-friendly atmosphere.\\n\\nThroughout the summer, I had been trying to follow the advice of mentors to keep my options open, so I interviewed with several different companies and had informationals with several teams across Microsoft. In that process, I discovered the Partner Catalyst Team, whose charter was basically to code with Microsoft partners on whatever they were building, which often times included contributing to open-source projects and traveling around the world. I met with a couple of the managers from the team, and even jumped on a Hackathon project with one of them as a little test run of what it would be like to work with them. I had a *great* time and learned a lot in the 3 days we worked together.\\n\\nWe went home for the summer. I was still talking to and interviewing with several different companies around the West, including leaving my poor wife while she was 8.9 months pregnant to fly to Silicon Valley. After weighing a few options, thinking about what was best for our family and where I could grow the most, I chose to stay at Microsoft, but switch to this new team. Both my wife and I thought this was the right call and we were ecstatic.\\n\\nI went to school and finished my last semester, graduating in December of 2017 and returning to Microsoft on January 8th of 2018. The team had been re-organized and renamed as Commercial Software Engineering (CSE), and I\'d be specifically working with the Digital Win Room team within that organization. I spent a week with the team, and then took 2 of the 3 available months of paternal leave, which I was able to use at any time before our new son Jack\'s birthday in August. I couldn\'t believe how understanding they were and that the team was happy to let me take that time to get the family moved and spend time together before really starting at work.\\n\\nI\'ve been officially back for just about 3 months now, and I have had a blast with some really cool projects and fun adventures. I\'ll do my best to keep the blog updated on the happenings here.\\n\\nSo, there you have it. I joined Microsoft because I felt like it would be a place where I could grow as a Software Engineer and, even more importantly, as a husband and father. I stay because those things are still true. \\n","data":{"title":"Joining Microsoft","date":"2018-6-1","path":"joiningmicrosoft"},"isEmpty":false,"excerpt":""},"microsoft2016":{"content":"\\nIn 2016, I had the opportunity of working with the WDG GS Data Insights team at Microsoft. While there, I was given the task of automating the process of taking action on international customer feedback. Because Windows 10 gets such a high volume of feedback from its users, a lot of valuable information sits idly in a database without anyone being able to act on it. Of course, there is always a lot of junk to sift through and LOTS of duplicated pieces of feedback, which made the challenge of automating the process even more interesting.\\n\\nI was privileged to work with teams and individuals across Microsoft, many of whom were quite a few pay grades ahead of us lowly interns. One of my absolute favorite parts of my internship was the aspect of collaboration. As my all-time hero once said, \\"It\'s amazing how much can be accomplished when no one cares who gets the credit.\\" (John Wooden) While I understand and agree that everyone deserves credit for their work and accolades for a job well-done, I also feel that there is something to be said for those synergistic teams that are able to feed off of one another and do something great because they are more focused on the thrill of the project than their own career advancement.\\n\\nI was grateful for my Database Systems course I had taken the previous semester, because I was able to help optimize the database being used. Previously, some of the queries took over a minute (sometimes more) to process. After some of our optimizations, those queries were running in 2 seconds or less.\\n\\nIn order to identify actionable feedback and filter out those that had nothing , I worked with a team that has spent the last 2.5 years developing an internal text analytics engine that could help do just that. I met with their team lead on an almost-weekly basis to discuss needs of the project and even help them debug their solution. It was a great partnership and I was grateful for all of their help.\\n\\nI also worked with several web technologies, as bugs and Work Items are housed in Visual Studio Online. In order to pass actionable feedback onto developers, I needed a Restful Web Api that I could call to \\"promote\\" such a bug. Thankfully, there was another team of very helpful individuals that managed that Api, and that ended up being the easiest part of the project.\\n\\nEven after launching our first batch of auto-promoted bugs, the system was not perfect. There were still a few pieces of feedback that probably should not have been promoted, but to give you some perspective, our first batch was only 131 promoted bugs out of 10M+ pieces of feedback sitting in the database. The filtering was not perfect, but it was a start.\\n\\nThe rest of the summer was spent trying to refine the process. I worked with teams of native-language speakers to identify the original translation of each feedback to determine the meaning. One of the great eye-openers during this process was the discovery of how difficult machine translation really is. It\'s an incredibly fascinating problem, but one that seems to have no perfect solution... yet.\\n\\nI\'ve accepted an offer to return to the same team for another internship next summer, where I\'m told I might be working on helping to improve machine translation. I\'m still not sure in what capacity that will be, but I\'m just excited to be a part of it.\\n","data":{"title":"Microsoft - Summer 2016","date":"2016-9-2","path":"microsoft2016"},"isEmpty":false,"excerpt":""},"mistakes":{"content":"\\nNow that I\'ve click-baited you into opening this post, let me just reassure you of a few things:\\n\\n1. I still have my job\\n2. The Azure subscription was just a development subscription, so no $ was lost\\n3. An irresponsible amount of GIFs will be used in this post.\\n\\n![alt text](https://media.giphy.com/media/4PT6v3PQKG6Yg/giphy.gif)\\n\\n## The Discovery\\n\\nIt was a crisp, autumn work-from-home kind of Friday. After having breakfast with my family, I went downstairs to my office and cracked open the laptop to begin another wonderful day of writing code...\\n\\nThe afternoon prior, I had deployed an Azure Function that would be running a [Cloud Custodian](https://cloudcustodian.io/) policy to clean up our Azure Subscription. We had a lot of test resources that needed to be removed, so I asked our team to tag any resource groups they needed with `CreatedBy` and their email address for notifications. They all looked through the subscription and tagged their resource groups accordingly. I told them that early Friday morning, I would run a scrub of all resource groups and delete any that did not have owners, and that was the policy that was deployed... or so I thought.\\n\\nThat morning, to my utter shock and horror, I opened the Azure portal to discover _**one**_ resource group... `cloud-custodian`.\\n\\nSo many questions started racing through my mind. How did this happen? Where did I go wrong? What had caused this lone surviving resource group to cannibalize all of his innocent, appropriately-tagged brothers? Panic had already begun to take over.\\n\\nI opened up the repository containing the policies I had written, and that\'s when I saw it. I had neglected to update the test tag I had been using... `CreatorEmail`. I had also been testing a policy that would send a weekly email to the members of my team with a summary of their resource groups, which would enable them to do a quick scan and go remove any they didn\'t need anymore. I created the `CreatorEmail` tag to test the notification system on the `cloud-custodian` resource group so that I wasn\'t spamming my whole team while I was testing the policy. At the end of the day, I ran a script that deployed all the policies I was working on. That test tag had been copied and pasted to the other policies had deployed. I did read things through, but clearly not closely enough. I had deployed a rogue agent... I opened the doors wide open and let a monster into our house.\\n\\n## The Fallout\\n\\nClearly, this was not going to be a mistake that would fly under the radar, so I figured the sooner I got in front of this, the less likely my head would end up on a pike outside the Microsoft headquarters. I immediately called my manager to tell him what happened. \\n\\n![alt text](https://media.giphy.com/media/sS8YbjrTzu4KI/giphy.gif)\\n\\nHe was in another call, so we chatted online. I told him what had happened. I\'m not sure he believed me until he opened the portal and witnessed the devastation for himself. _\\"You\'re right... it nuked everything,\\"_ he responded.\\n\\nAfter what seemed an appropriate moment of silence for the fallen resource groups, he was quick to point out that `a)` this is only a dev subscription and `b)` anything in the sub should be easily reproducible. He reminded me that everyone goes through something like this at some point, and this was a pretty low-stakes environment for it to happen. Then, like a mayor of a city ravaged by a natural disaster, he stated, _\\"We can rebuild.\\"_\\n\\nAfter the call with my manager, I called a couple team members to assess the extent of the damages. I called my tech lead and told him what had happened. He laughed. He told me about a time where he had deleted a production database early on in his career and reminded me of some of the same things my manager told me. We then made a plan for restoring some of the lost resource groups that were actually public facing.\\n\\nI decided it was time to tell the team. I wrote up a long email describing the details of what had happened and posted it in our chat channel as well. I was fully expecting a swift and brutal judgement worthy of my crimes.\\n\\n![alt text](https://media.giphy.com/media/qiDb8McXyj6Eg/giphy.gif)\\n\\nBut rather than _\\"How could you?\\"_, _\\"How dare you?\\"_ or other responses you might expect in such a circumstance, every member on the team simply reacted to my message with a single emoji:\\n\\n\ud83d\udcaa\\n\\nas if to say _\\"Be Strong.\\"_\\n\\nAnd that was pretty much it. After some of the initial rawness of the incident had worn off, we were able to laugh about it a little bit. A team member pointed out that until you break production, you\'re not a real engineer. I countered with the remark that if that was all it took, I would\'ve done this a long time ago. I got to work restoring the damages, reached out to other developers that were using some of our deployed services and helped them get back up to speed.\\n\\n## Takeaways\\n\\n### Technical Empathy and a Blameless Culture\\n\\nOne of the surprising parts of this experience was the empathy shown by my colleagues. They were quick to point out times where similar things had happened to them or others and to remind me that it was an honest mistake. This kind of \\"technical empathy\\" is not only helpful, but essential in building successful, collaborative software teams that trust each other and work together. This is one example where the empathy of my teammates gave me the boost that I needed to get back up and start fixing things rather than wallow in my own self pity.\\n\\nTechnical empathy should be used in more than just response to disasters. For example, it is also useful in giving (and receiving) code reviews. Rather than belittling team members for making what we perceive to be a mistake in the code, we can try to understand why they felt they had to do what they did. There very well may be an obstacle that we, as reviewers, are unaware of. Technical empathy should also be used in reading legacy code. In our team at Microsoft, we work with dev teams of other companies to help them solve interesting challenges, usually related to Azure. As a byproduct of that, we get to see _a lot of new codebases_. Every time we crack one open, there\'s a little bit of apprehension (and even fear) about what we might find. Technical empathy can be applied here too. A popular article titled [\\"The software engineer\u2019s guide to asserting dominance in the workplace\\"](https://medium.com/feature-creep/the-software-engineer-s-guide-to-asserting-office-dominance-ddea7b598df7) (satirically) recommends the following strategy for ramping up on a codebase when joining a new team:\\n\\n_\\"Spend the rest of the day familiarizing yourself with the team\u2019s codebase. Every five to ten minutes, let out a deep sigh and write something down on a notepad. Maintain a demeanor of mild disgust on your face that gets increasingly more annoyed as you browse through more and more of the code. Mumble words like \u201crefactor\u201d and \u201crewrite\u201d under your breath. Start drawing random complex architectural diagrams on your whiteboard. By 3 PM you should be visibly angry. Eat some chili peppers to force yourself to sweat. At 4 PM, allow your rage to boil over and throw your last egg at the wall in a fit of rage. Slam your laptop closed and head home early._\\n\\nIt is easy to be critical when you\'re unaware of the constraints and difficulties encountered by other developers. Often times, on high-performing teams, if you have an idea within the first few seconds of looking at a problem, it\'s possible that other engineers might have tried the same approach. That\'s not to say you shouldn\'t share your ideas on how things could be better, but be hesitant about jumping to the conclusion that you\'re surrounded by morons and that you are the only one who is truly \\"one with the code.\\" For more info on the subject, visit [this article on how empathy is a technical skill](https://www.infoq.com/articles/empathy-technical-skill/).\\n\\nRather than becoming upset and demanding my immediate dismissal, my team responded with _\\"Sorry that happened, it happens to all of **us**, what do we do to fix it?\\"_ The phrase \\"blameless culture\\" became more than just a line in our team\'s working agreement.\\n\\n### Use the Buddy System\\n\\nFor any of you that ever went to any kind of summer camp, you know that one of the first rules they tell you is to never wander off alone. Bring a buddy along with you. If I would have just listened to my camp counselor and followed that simple rule, you wouldn\'t be reading this blog post right now.\\n\\nAs software engineers, asking others for help or to look over our work isn\'t always our natural inclination. We often see ourselves as a one-man army, equipped with a mechanical keyboard and multiple monitors, leaving a trail of dead bugs and shattered features in our wake.\\n\\n![alt text](https://media.giphy.com/media/TBOvwBGkQShnq/giphy.gif)\\n\\nTo counteract that behavioral tendency, we put up quality gates. On our team, in every repository we work with, we establish branch protection policies that prohibit anyone from pushing directly to `master` or even `dev`. We require pull requests that trigger CI pipelines and establish baseline coverage requirements for both the project as a whole and the current diff being submitted. (Side note on code coverage: We recognize that developers can \\"game the system\\" when it comes to code coverage, so the tests are reviewed with just as much scrutiny as the application code.) \\n\\nThese standards are required on every single project that we work on. All of this could have been so easily prevented if I had just asked for even one other pair of eyes to look over these basic policies before I had deployed them. Instead, I ignored the rules, wandered off into the wilderness by myself and got mauled by the proverbial bear of disaster.\\n\\nUPDATE: Now, these policies are deployed from a central build server via an Azure Pipeline, which is triggered on merges to the master branch of a repository that requires two approvals from members of the team in order to merge.\\n\\n### Be especially careful with irreversible actions\\n\\nPart of the tragedy of this episode was its finality. There was no commit to revert, no deployment to roll back. These resource groups were as lost as Black Widow after Endgame.\\n\\nA lot of what we do as software engineers is set up guard rails and fail-safes so that when things break, we have a quick way to return to the state we were in before the change. When we decide to venture outside the lines and do things that are irreversible, we should do so with care and hopefully, with a buddy \u261d.\\n\\nUPDATE: Currently, in our Cloud Custodian policies, \\"nuclear\\" actions (like delete) are given a \\"grace period\\" of 7 days before they are enacted. The resources are tagged for the operation and an email is sent to the team member(s) responsible for the resource so that they can cancel the operation if necessary.\\n\\n### Automate, Automate, Automate\\n\\nFor several members of my team, this loss was almost trivial. Many of the resource groups were just a CLI execution or a pipeline run away from being restored. Sometimes we spend _too_ much time trying to automate tasks when we just need to stand something up and get unblocked, but when possible, use scripts, pipelines and templates to do the dirty work. It will save you (and probably your team) hours of work later on if that work needs to be replicated. It will allow you to focus on solving the cool problems instead of re-figuring out something you\'ve done before.\\n\\n## Conclusion\\n\\nMistakes are part of software engineering and a part of life. I make them every day, and I don\'t expect that to stop any time soon. But I don\'t expect to make the same mistake twice. My all-time basketball hero, John Wooden, once said _\\"Failure is not fatal, but failure to change might be.\\"_ You don\'t have to let something like this happen to you. In fact, I highly recommend that you don\'t. Learn from my experience. Ask for another pair of eyes. Be careful if you\'re doing something irreversible. Set up recovery steps to back up your work. It will save you a lot of heartache and a lot of time someday.\\n","data":{"title":"I Wiped Our Entire Azure Subscription...","date":"2019-10-4","path":"mistakes"},"isEmpty":false,"excerpt":""},"nbaclustering":{"content":"Player positions in the NBA have become a rather fluid concept. Teams like the Warriors with their \\"Lineup of Death\\" have shaken the traditional mindset of the basketball world. We wanted to be able to build out a clustering model that used a player\'s statistics to identify the player\'s \\"true position.\\" When we say \\"true position,\\" we mean the position the player plays most alike. While LeBron James could be listed at just about any position on the floor, we wanted to know what his stats told us. By creating an unsupervised clustering model, players would be grouped together with other players of a similar statistical model.\\n\\n## Introduction\\n\\nOur Data Mining project was based on looking for statistical groupings in the National Basketball Association that define the different positions in the modern game of basketball. In basketball, often a given position becomes an argument for what will and won\u2019t work on a roster, when it\u2019s really much more complicated than that. We want to define the numbers behind what a guard, forward, wing or center is, as well as look for outliers, such as forwards performing statistically equivalent to guards. \\nThe key idea to our project was that there is more to a player than his labeled position. As the NBA has changed in the modern game, there has been a tendency to \u2018play small\u2019 as popularized by the Golden State Warriors infamous \u2018Lineup of Death\u2019. Examples like these have shown that players longtime slotted into a single position are actually more flexible, and possibly more effective, when placed somewhere completely new. Our goal was to use clustering methodology to look for what defines each of the four positions and search for specific groups of players, as well as outliers, in order to view the game differently. Our graphs have been created using Power BI, an interactive data visualization tool, and we strongly recommend opening the dashboard side by side while reading this paper. It can be found at [this link](https://app.powerbi.com/view?r=eyJrIjoiODgzZjhiMmQtYmU5My00NzM4LTk1MjUtNWVhYWUzM2RiYzhlIiwidCI6Ijg0YzMxY2EwLWFjM2ItNGVhZS1hZDExLTUxOWQ4MDIzM2U2ZiIsImMiOjZ9). \\n\\n## Data Wrangling and Cleaning\\n\\nFor our project, we used individual statistics of players from the 2010 - 2016 seasons in the NBA, which we obtained from https://probasketballapi.com/. The data didn\u2019t turn out to be perfect and required several rounds of cleaning and refining in order to produce something worth using. To start, there were several non-basketball athletes in the data set, many players were minimum impact competitors who hardly played and didn\u2019t last very long in the NBA, and some categories, like position, were labeled in an extremely haphazard manner. For example, a player could easily be labeled as a Guard, Point Guard, Shooting Guard, Point Guard/Shooting Guard or Shooting Guard/Point Guard with no distinction as to why any particular choice was made. In order to give a wide range of options, we ran our simulations over statistics gathered from each season, as well as an averaged statistical output from the entire 2010 - 2016 data set.\\n\\nIn cleaning our data, we eliminated all non-basketball players, required that a player has played at least 20 games and averaged at least 10 minutes played per game. To normalize the position labels and make up for a lack of distinction between some positions, we organized the athletes into four basic positions. \u201cGuard\u201d consists of players labeled Guard, Point Guard or capable of playing Point Guard or Shooting Guard. \u201cWing\u201d consists of Shooting Guards (only 3 players in the whole dataset labeled as such), hybrid Guard/Forwards and Small Forwards. \u201cForward\u201d consists of hybrid Small and Power Forwards and pure Power Forwards. And \u201cCenter\u201d is our big man group, consisting of hybrid Power Forward/Centers and Centers. While originally, we only had three positions defined, looking at the numbers in the many categories provided by our data source, we felt these four categories most naturally used the distribution to create a good foundation for our analysis and represented the current state of NBA tactics. One of the difficulties in identifying effective clustering measures was the skew in number of players for each position. This is shown in the already-large and increasing number of guards, as depicted below.\\n\\n![alt text](https://github.com/tbarlow12/tbarlow12.github.io/blob/dev/resources/images/nba-1.png?raw=true)\\n\\nThis increase of smaller players seems to agree with the rest of our analysis, as the league is trending towards players who can score from long range as opposed to the traditional, \u201cinside-out\u201d philosophy, but it adds to the challenge of finding effective clustering measures.\\n\\n## Initial Analysis\\n\\nWe began our analysis by doing simple comparisons among the four positions we had identified. We compared the averages of the box score statistics, the advanced statistics and some of the shot chart statistics to look for simple ways in which the positions differentiated themselves.\\n\\n\\n![alt text](https://github.com/tbarlow12/tbarlow12.github.io/blob/dev/resources/images/nba-2.png?raw=true)\\n\\n\\n![alt text](https://github.com/tbarlow12/tbarlow12.github.io/blob/dev/resources/images/nba-3.png?raw=true)\\n\\n\\n![alt text](https://github.com/tbarlow12/tbarlow12.github.io/blob/dev/resources/images/nba-4.png?raw=true)\\n\\n## Clustering\\n\\nWe began with clustering our dataset using both hierarchical clustering with single-link distance metrics and assignment-based clustering using k-means++ and Lloyd\u2019s algorithm. We originally used Gonzalez\u2019s as well but found it less effective and switched our comparisons to single-link and k-means++. For both algorithms, we clustered the data from k = 3 to k = 8, using every combination of 7 statistical feature sets for each player: box score, advanced statistics, shot zone, shot range, shot area, action type and shot type. We ran assignment-based clustering for larger values of k, but with the amount of time required to run single-link hierarchical clustering, we limited our comparison from k = 3 to k = 8. Even with the limited scope, this resulted in almost 10,000 different clusterings with no simple way to identify which were better suited for our purposes. In order to find which clusterings best represented our chosen positions, we began searching for \u201cpolarity\u201d among the results. We define \u201cpolarity\u201d for a group of clusters as the average percentage of the dominant position for each cluster. Ideally, we would want a group of clusters to have a polarity of 100%, which would mean each cluster would consist entirely of one position.\\n\\n## Results\\n\\nThe first thing we found is that hierarchical clustering with single-link did not perform as well as we thought. We had anticipated that single-link would do well in linking the most statistically similar players one at a time and that this would lead to a more linear clustering of players. What it actually did, in most cases, was produce (K - 1) singleton clusters and 1 large cluster of the rest of the players. This lead to it getting great scores on our polarity tests, because a cluster consists of only 1 or 2 players, it\u2019s pretty easy to get a cluster of 100% the same position. The variation in cluster size is shown in the graph \u201cCluster Size Standard Deviation.\u201d While not especially valuable for clustering, it was interesting to see the algorithm identify the game\u2019s \u201csuperstars\u201d (Russell Westbrook, Lebron James, Kevin Durant, etc.). We then decided to programmatically prioritize cluster sets that had larger chunks of one position in each collection and focus solely on k-means++ assignment-based clustering for our results.\\n\\n![alt text](https://github.com/tbarlow12/tbarlow12.github.io/blob/dev/resources/images/nba-5.png?raw=true)\\n\\nIn the end, our polarity methods determined that the best clustering result was using Lloyd\u2019s algorithm with k-means++, clustering on box score, advanced statistics, shot range (Less than 8 ft., 8-16 ft., 16-24 ft., 24 ft.+), action type (pull-up jumper, alley-oop dunk, etc.) and shot type (2 pt. vs. 3 pt.) for the 2013 season data set where k = 7.\\n\\n![alt text](https://github.com/tbarlow12/tbarlow12.github.io/blob/dev/resources/images/nba-6.png?raw=true)\\n\\nIn figure 5, you can see the basic results of our determined best clustering, organized by position and each cluster\u2019s size. We call cluster 1 the \u201cAttack the Rim\u201d cluster. It consists of high volume inside shooters like Derrick Rose, Kobe Bryant, Brook Lopez and JaVale McGee. It\u2019s interesting to see how this clustering put players in very different positions into the same grouping. Cluster 2 is our \u201cTrue Point Guards\u201d (traditional, pass-first) collection, with Rajon Rondo, Jrue Holiday, Steve Nash and Eric Bledsoe leading the way. Cluster 4 is referred to as our \u201cSpot-up Shooters\u201d cluster, consisting of high volume outside shooters like Jimmer Fredette, Brandon Rush, CJ McCollum and Jason Terry. Players who are known more for their ability to shoot from the floor, and are most likely subpar defenders. Cluster 7, which we call the \u201c6th Man Cluster\u201d, is another intriguing look. It is full of guards known for high scoring and utility in limited minutes. Matthew Dellavedova, J.J. Barea, Jeremy Lin, Patrick Beverley, Lou Williams, Jerryd Bayless, Shelvin Mack, Iman Shumpert and even Andre Miller are all sorted here.\\n\\nWhile these little itemizations are fun, overall, we learned a great deal from this project. The first thing we learned was that more data is not inherently good thing. The more parameters you input, the more confounding and confused your results can become. As your results become harder to visualize, it\u2019s difficult to tell if your results actually mean anything. Clustering is also a difficult problem, and the methodology you decide on at the beginning heavily affects your results. In our quest to determine positional outliers, we also had tremendous success. One example is our \u201c6th Man Cluster\u201d. While being primarily guards, an outlier is the inclusion of Andre Iguodala. Though this is based on the 2013 data set, it feels reminiscent of Iguodala\u2019s run as a key playmaker in Golden State\u2019s aforementioned \u2018Lineup of Death\u2019. His ability to play a role far from his position title led to his naming as Finals MVP in Golden State\u2019s championship. Looking to the future, similar clusterings on the 2016 data set have us extremely interested in the futures of Sam Dekker, Kelly Oubre Jr. and Myles Turner. It becomes even more difficult to cluster over a career when taking into consideration the evolution of each player\u2019s style of play. One of the most well-known examples of this was Michael Jordan\u2019s shift from the high-flying dunk virtuoso that he was when he entered the league to the clutch scorer from mid-to-long range that he became near the end of his career. We don\u2019t think the NBA has ever been as simple as slotting 5 players into position on the floor. And it\u2019s only going to get more interesting.\\n\\n## Future Work\\n\\nIn order to narrow the scope of this project, we chose to cluster based on groups of statistics (box score, advanced, shot type, etc.) rather than individual statistics themselves. This is partly for our own sanity in trying to keep track of 123 different statistical measures for each player over the span of 6 NBA seasons, but mostly because of the combinatorial nightmare that would arise when trying to find effective combinations of statistics for high accuracy in clustering players based on position. Given the time and resources, we would like to run all possible combinations of those stats, or at least a reasonable amount of those combinations, to see if we can fine-tune our view about which statistics really are indicative of position, how those positions change and evolve over time and how the game is influenced by this position fluidity.","data":{"title":"NBA Position Clustering","date":"2017-4-8","path":"nbaclustering"},"isEmpty":false,"excerpt":""},"pycon2019":{"content":"\\nThis is a summary of 5 of my favorite talks from PyCon 2019. I learned a ton throughout the conference and felt that the learnings needed to be shared. I\'ve tried to summarize as best as I could from the notes that I took. I believe the talks will be available online soon if they are not already. Big thanks to the speakers for all the effort they put in to make their talks so practical and engaging.\\n\\n## Black Swans - Keynote from Russell Keith-Magee\\n  \\n  This was the first keynote of the conference, and it was **awesome**. Mr. Keith-Magee discussed the [black swan theory](https://en.wikipedia.org/wiki/Black_swan_theory), which, as a very crude summary, are things that seem obvious in hindsight but that no one had thought of previously. \\n  \\n  He tied that to the 1983 America\'s Cup winning sailing team from Perth, Australia, and their use of the [winged keel](https://en.wikipedia.org/wiki/Winged_keel). This innovation helped their boat move with less resistance. Sailboats had been roughly the same for the previous few decades and teams that failed to innovate were left behind. He invited us to challenge our assumptions and to look for \\"black swan\\" innovations, particularly relating to the open-source and Python communities.\\n\\n## Break the cycle: three excellent python tools to automate repetitive tasks - Thea Flowers\\n\\n### 1. `tox`\\n    \\nOne of the most common tools used in Python applications. Used to run tests in multiple environments and even multiple versions of frameworks. For example if you want your app to support multiple versions of Python and multiple versions of Flask, your `.ini` file could look something like (example taken from the `flask-restful` repo):\\n    \\n~~~ \\n[tox]\\nenvlist=\\n    py{27,34,35,36,37}-flask{0_10,0_12,10}\\n\\ndeps =\\n    flask0_10: flask>=0.10,<0.11\\n    flask0_12: flask>=0.12,<1.0\\n    flask10:   flask>=1.0,<1.1\\n\\n[testenv]\\nusedevelop = true\\ncommands =\\n    pip install -e .\\n    nosetests\\ndeps =\\n    -r{toxinidir}/tests/requirements.txt\\n~~~ \\n\\nWhen the command `tox` is executed, this would run the test suite **15 times** (cross product of Python environments and Flask versions - `5 x 3 = 15`). As part of that process, it would install the necessary dependencies in virtual environments (according to each version) and run the tests. Pretty cool.\\n\\n### 2. `nox`\\n    \\nPretty cool to listen to a talk from the original `nox` author. `nox` is very similar to `tox`, but rather than using the `.ini` file, its configuration is done in Python itself. The `nox` equivalent to the `tox.ini` file above would be something like:\\n\\n~~~ python\\n@nox.session(python=[\'2.7\', \'3.4\', \'3.5\', \'3.6\', \'3.7\'])\\n@nox.parameterize(\'flask\', [\'0.10\', \'0.12\', \'1.0\'])\\ndef tests(session, flask):\\n    # Install pytest\\n    session.install(\'pytest\')\\n    # Install version of flask\\n    session.install(f\'flask=={flask}\')\\n    # Install everything in requirements-dev.txt\\n    session.install(\'-r\', \'requirements-dev.txt\')\\n    # Install the current package in editable mode.\\n    session.install(\'-e\', \'.\')\\n    # Run pytest. This uses the pytest executable in the virtualenv.\\n    session.run(\'pytest\')\\n~~~ \\n\\nAlso a really cool option, which is helpful if you need something slightly more flexible than `nox` or if you\'d rather write config-as-code.\\n\\n### 3. `invoke`\\n\\nInvoke is seen as a more flexible automation tool. For example (straight from `invoke`\'s docs):\\n\\n~~~ python\\nfrom invoke import task\\n\\n@task\\ndef clean(c, docs=False, bytecode=False, extra=\'\'):\\n    patterns = [\'build\']\\n    if docs:\\n        patterns.append(\'docs/_build\')\\n    if bytecode:\\n        patterns.append(\'**/*.pyc\')\\n    if extra:\\n        patterns.append(extra)\\n    for pattern in patterns:\\n        c.run(\\"rm -rf {}\\".format(pattern))\\n\\n@task\\ndef build(c, docs=False):\\n    c.run(\\"python setup.py build\\")\\n    if docs:\\n        c.run(\\"sphinx-build docs docs/_build\\")\\n~~~ \\n\\nwhich is run by calling:\\n\\n~~~ bash\\n$ invoke clean build\\n~~~ \\n\\nThis can be very useful even outside of things like Python testing. Planning on converting some of the scripts I use on my machine to `invoke` commands.\\n\\n## Wily Python: Writing simpler and more maintainable Python - Anthony Shaw\\n  \\nThis talk was definitely one of my favorites. We had just talked a lot about code complexity when working on [VoTT](), and not many of us knew exactly how that was calculated. Anthony talked about three different ways to measure code complexity and how all of them play a factor in calculating the \\"maintainability index\\".\\n\\nThe first, most crude way of measuring complexity is by **lines of code**. Fewer lines *can* be less complicated, but in a language like Python, you could have a one-liner like this function for the Sieve of Eratosthenes:\\n\\n~~~ python\\ndef sieve_eratosthenes(n):\\n    return sorted(set(range(2,n+1)).difference(set((p * f) for p in range(2,int(n**0.5) + 2) for f in range(2,(n/p)+1))))\\n~~~ \\n\\nAnother measure is by **cyclomatic complexity**, for which he gave the example of ordering a Big Mac:\\n\\n~~~ \\nCASHIER: What would you like?\\nME: I\'d like a Big Mac please\\nCASHIER: Make it a meal?\\nME: Sure\\nCASHIER: Small, large or super size?\\nME: Large\\nCASHIER: What would you like to drink?\\nME: Coke\\nCASHIER: Diet or regular?\\nME: Regular\\n~~~ \\nJust in that interaction, the cyclomatic complexity would be **5**, which is basically *the number of decisions that need to be made*. In Python, things like `if`, `elif` and `try` are things that increase cyclomatic complexity.\\n\\nThis is why you might get asked in a code review to \\"invert `if` statement to reduce nesting.\\" The phrase *\\"flat is better than nested\\"* is directly from the Zen of Python (discussed more below) and explained in the famous email to the Python mailing list [Why \\"flat is better than nested\\"?](https://mail.python.org/pipermail/python-list/2010-October/590762.html).\\n\\nWhere the code complexity measurement gets more \\"mathy\\" is when we start talking about Halstead Complexity measures. I won\'t go too deep into this, but it involves operators, operands, sums of each and much more.\\n\\nWhen you combine these three measurements, you can calculate the `maintainability index` as such:\\n\\n~~~ \\nMI = 171 - 5.2 * ln(Halstead Volume) - 0.23 * (Cyclomatic Complexity) - 16.2 * ln(Lines of Code)\\n~~~ \\n\\nThere have been variations of this original formula, which you can read about [here](http://www.projectcodemeter.com/cost_estimation/help/GL_maintainability.htm)\\n\\nAfter discussing the theory behind all of this, Mr. Shaw introduced the Python utility he wrote called `wily`, which you can install on pip. `wily` is \\"A command-line application for tracking, reporting on complexity of Python tests and applications.\\" Definitely planning on using `wily` in my next Python project!\\n\\n## The Zen of Python Teams - Adrienne Lowe\\n  \\nMany people are familiar with \\"The Zen of Python\\" as laid out in an email from Tim Peters and described on python.org as \\"guiding principles for Python\'s design into 20 aphorisms, only 19 of which have been written down.\\" (meaning the 20th is something for us as a community to fill in for ourselves)\\n\\nHere are the 19 aphorisms:\\n\\n~~~ \\nBeautiful is better than ugly.\\nExplicit is better than implicit.\\nSimple is better than complex.\\nComplex is better than complicated.\\nFlat is better than nested.\\nSparse is better than dense.\\nReadability counts.\\nSpecial cases aren\'t special enough to break the rules.\\nAlthough practicality beats purity.\\nErrors should never pass silently.\\nUnless explicitly silenced.\\nIn the face of ambiguity, refuse the temptation to guess.\\nThere should be one-- and preferably only one --obvious way to do it.\\nAlthough that way may not be obvious at first unless you\'re Dutch.\\nNow is better than never.\\nAlthough never is often better than *right* now.\\nIf the implementation is hard to explain, it\'s a bad idea.\\nIf the implementation is easy to explain, it may be a good idea.\\nNamespaces are one honking great idea -- let\'s do more of those! \\n~~~ \\n\\n(If you didn\'t know, these are in a Python Easter Egg. Fire up `python` in your terminal and type\\n    \\n~~~ \\n>>> import this\\n~~~ \\nto see what I mean.)\\n\\nThese sayings are usually applied directly to the code that we write, but Adrienne Lowe discussed how we can take some of these principles and apply them directly to how we work within our teams. Here are a few that she discussed:\\n\\n### \\"Beautiful is better than ugly\\"\\n\\nWe can avoid \\"acting ugly\\" with our teammates. \\"Acting ugly\\" can come in the form of bitter, cutting code reviews, hoarding information and refusing to collaborate with others.\\n\\nShe referenced Westrum\'s [\\"A typology of organisational cultures\\"](https://qualitysafety.bmj.com/content/13/suppl_2/ii22), which discusses three different types of cultures in a team:\\n\\n#### 1. Pathological\\n- Information is a **personal** resource (not to be shared)\\n- Cooperation is discouraged\\n- Failure leads to scapegoating\\n- Accidents lead to blaming\\n\\n#### 2. Bureaucratic\\n- Responsibilities are narrow\\n- Alignment of team takes precedent over mission\\n- Failure leads to seeking justice\\n- Novelty leads to problems\\n- Maintain turf\\n- Insist on being done by the book - their book\\n- Inter-team dynamics neglected\\n\\nThis one reminded me immediately of the old cartoon depicting Microsoft\'s organizational culture-of-old:\\n\\n![alt text](https://dougbelshaw.com/blog/wp-content/uploads/2013/09/organizational_charts.png)\\n\\nThankfully, I can say that in my ~2 years working for Microsoft, I have yet to experience that kind of culture. Things have changed :)\\n\\n#### 3. Generative (the goal)\\n- High cooperation\\n- Risks are shared\\n- Failure leads to inquiry\\n- Information flows freely\\n- How can we accomplish our goal (\\"we\\" is expansive and inclusive of all)\\n\\n### \\"Explicit is better than implicit\\"\\n- We should *always* have playbooks, documents, resources, onboarding guides and steps to take when confused\\n- Having these in place and other process documentation makes it easier to include others and speeds up the work\\n- It is better to keep conversations about code in **main channels** of Slack or whatever messaging service you use as opposed to DMs or other private places. Helps everyone benefit from the knowledge being shared\\n- Documenting process also improves relationship between teams\\n- We should **document our people**\\n    - I enjoy working on...\\n    - I get excited by...\\n    - I struggle when...\\n    - I feel appreciated when...\\n    - I prefer feedback...\\n    - Ask me for help with...\\n- Helps with process of working within teams an can be extremely valuable\\n\\n### \\"Simple is better than complex\\"\\n- We build meaningful relationships with small interactions that increase understanding and trust\\n- Take time to have coffee with colleagues, catch up on weekend, etc.\\n- **Remote teams** -> Remote Happy Hours - just jump on a video call to chat about lives\\n- Build trust and familiarity with colleagues\\n- Like software, we build relationships with small but meaningful actions\\n\\n### \\"Errors should never pass silently\\"\\n- If something is wrong with my code, I want to know\\n- If I do something to hurt someone, I want to know\\n- We rely on other humans to know that we hurt them\\n- Feedback is the tool we have to understand our impact on others\\n- On healthy teams, people should understand what things they need to do to improve\\n- Be careful about how you respond about mistakes. We all need to be open about mistakes and willing to \\"share our trash\\" to the point that we\'re not self-conscious about getting feedback from others.\\n\\n### \\"In the face of ambiguity, refuse the temptation to guess\\"\\n- Don\'t `git blame` and stew about it\\n- Assume the best and don\'t guess at motives.\\n- Ask where they\'re coming from and try to understand why they did what they did\\n- Be assertive\\n- Open issues, comment on PRs\\n- Challenge directly but care personally\\n- Don\'t explain away code... or people\\n- Especially for managers. Don\'t guess about how your direct reports are doing. You should know.\\n\\n### \\"Now is better than never\\"\\n- Take **some** action to move closer to our goal\\n- \\"Doing and being wrong is a lot better than not doing at all\\"\\n- Everyone benefits from being reminded that they can start where they are\\n- **Challenge** - Fill in the 20th line of the Zen and share it on social media with `#HereYaGoGuido`\\n\\n\\n## Type hinting and `mypy` - Bernat Gabor\\n\\n- Why use types in Python? Why not just use Java/C#?\\n  - Makes code easier to:\\n    - understand\\n    - use\\n    - maintain\\n    - debug\\n    - refactor\\n  - Creates more accurate code suggestions\\n  - Does lint checks that find bugs with no tests\\n  - Improve documentation\\n  - Built-in data validation\\n  - Performance increase (sometimes)\\n    - `mypyc` - Compiles c-extension type hinted code (not full syntax support yet), can lead to 4 to 20x performance improvement (due to the avoidance of hashtable lookups)\\n- You can *gradually* introduce typings into your code (not all or nothing)\\n- Typing example:\\n~~~ python\\ndef greeting(name: str) -> str:\\n    s: str = name # You can add type annotations inline\\n    return s\\n~~~ \\n- Gotchas\\n  - If you have to maintain both Python 2 & 3, this will be difficult\\n  - If you have mulitple return types, the best way to use typings will be to use the `@overload` decorator and declare the function multiple times\\n  - Type lookup - looks for type in closest namespace\\n    - For example, if you have a function named `float` that returns a `float` data type, it will type the return value as the function itself\\n- Typing packages\\n  - `mypy` - Reference implementation type checker\\n  - `pyre` - Facebook\\n  - `pytype` - Google\\n  - `pyright` - Microsoft (fun fact - written in TypeScript)\\n\\n## Conclusion\\n\\nI hope this summary was of value to someone. Thank you again to the speakers and organizers of PyCon 2019.\\n","data":{"title":"Top 5 (unordered) Learnings from PyCon 2019","date":"2019-5-6","path":"pycon2019"},"isEmpty":false,"excerpt":""},"serverless-part1":{"content":"\\n## Overview\\n\\n(_See the [original post here](https://serverless.com/blog/serverless-azure-functions-v2)._)\\n\\nWith the [recent updates to the `serverless-azure-functions` plugin](https://github.com/serverless/serverless-azure-functions/blob/master/CHANGELOG.md), it is now easier than ever to create, deploy and maintain a real-world REST API running on Azure Functions. This post will walk you through the first few steps of doing that. \\n\\nTo see the full end-to-end example used to create this demo, check out [my GitHub repo](https://github.com/tbarlow12/sls-az-func-rest-api). I structured [each commit](https://github.com/tbarlow12/sls-az-func-rest-api/commits/master) to follow the steps described in this post. Any steps named `Step X.X` are steps that involve no code or configuration changes (and thus not tracked by source control), but actions that could/should be taken at that point in the process. This is done to preserve the \\"commit-per-step\\" structure of the example repo.\\n\\nThis post will only cover the basics of creating and deploying a REST API with Azure Functions, which includes [step 1](https://github.com/tbarlow12/sls-az-func-rest-api/commit/6cd5deebf34645f1ebc829d590e0b169e6c23e29) and [step 2](https://github.com/tbarlow12/sls-az-func-rest-api/commit/5ac83c915e7e78ecfe8e30e03c8425d09c1de936) from the example repo. Stay tuned for posts on the additional steps in the future.\\n\\nI will make the assumption that you have the Serverless Framework installed globally. If you do not (or have not updated in a while), run:\\n\\n```\\nnpm i serverless -g\\n```\\n\\nAlso, the `serverless` CLI can be referenced by either `serverless` or `sls`. I will use `sls` in this post just because it\'s shorter, but `serverless` would work just the same.\\n\\n## Step 1: Create your local Azure Function project\\n\\nLet\'s begin by creating our Azure Function project with a template from serverless.\\n\\n```\\nsls create -t azure-nodejs -p sls-az-func-rest-api\\n```\\n\\nThe resulting project will be in the directory `sls-az-func-rest-api`. `cd` into that directory and run `npm install`. To make sure you have the latest version of the Azure Functions plugin, run:\\n\\n```\\nnpm install serverless-azure-functions --save\\n```\\n\\nIt\u2019s important to note that the generated `serverless.yml` file will contain a lot of commented lines, which start with `#`. Those are purely for your benefit in exploring features of the Azure Functions plugin, and can be safely removed.\\n\\n## Step 2: Add your own handlers\\n\\nFor the sake of this demo, we\u2019re going to create a basic wrapper of the GitHub API for [issues](https://developer.github.com/v3/issues/) and [pull requests](https://developer.github.com/v3/pulls/).\\n\\nAs you\u2019ve probably already noticed, the `azure-nodejs` [template](https://github.com/serverless/serverless/tree/master/lib/plugins/create/templates/azure-nodejs) comes preloaded with two functions: `hello` and `goodbye`. Let\u2019s remove those before we start adding our own code. To do this, remove both the `hello.js` and `goodbye.js` files. Also, remove their configuration definitions from `serverless.yml`.\\n\\nRight now your file structure should look something like:\\n\\n```\\nsls-az-func-rest-api\\n|-- host.json\\n|-- package.json\\n|-- README.md\\n|-- serverless.yml\\n```\\n\\nand your `serverless.yml` should look like (not including any comments):\\n\\n```yaml\\nservice: sls-az-func-rest-api \\n \\nprovider:\\n  name: azure\\n  region: West US 2\\n  runtime: nodejs10.x\\n \\nplugins:\\n  - serverless-azure-functions\\n \\npackage:\\n  exclude:\\n    - local.settings.json\\n    - .vscode/**\\n \\nfunctions:\\n```\\n\\n### Add Code\\n\\nLet\u2019s add in our own code. We\u2019ll start by creating the directory `src/handlers`. This, perhaps to your great surprise, will be where our handlers will live. Inside that directory, we will put our two handlers: [issues.js](https://github.com/tbarlow12/sls-az-func-rest-api/blob/master/src/handlers/issues.js) and [pulls.js](https://github.com/tbarlow12/sls-az-func-rest-api/blob/master/src/handlers/pulls.js).\\n\\n```javascript\\n// src/handlers/issues.js\\n\\nconst utils = require(\\"../utils\\");\\nconst axios = require(\\"axios\\");\\n\\nmodule.exports.handler = async (context, req) => {\\n  context.log(\\"Issue Handler hit\\");\\n\\n  const owner = utils.getQueryOrBodyParam(req, \\"owner\\");\\n  const repo = utils.getQueryOrBodyParam(req, \\"repo\\");\\n\\n  if (owner && repo) {\\n    const response = await axios({\\n      url: `https://api.github.com/repos/${owner}/${repo}/issues`,\\n      method: \\"get\\"\\n    });\\n    context.res = {\\n      status: 200,\\n      body: response.data\\n    };\\n  } else {\\n    context.res = {\\n      status: 400,\\n      body: \\"Please pass the name of an owner and a repo in the request\\"\\n    };\\n  }\\n};\\n```\\n```javascript\\n// src/handlers/pulls.js\\n\\nconst utils = require(\\"../utils\\");\\nconst axios = require(\\"axios\\");\\n\\nmodule.exports.handler = async (context, req) => {\\n  context.log(\\"Pull Request Handler hit\\");\\n\\n  const owner = utils.getQueryOrBodyParam(req, \\"owner\\");\\n  const repo = utils.getQueryOrBodyParam(req, \\"repo\\");\\n  \\n  if (owner && repo) {\\n    const response = await axios({\\n      url: `https://api.github.com/repos/${owner}/${repo}/pulls`,\\n      method: \\"get\\"\\n    });\\n    context.res = {\\n      status: 200,\\n      body: response.data\\n    };\\n  } else {\\n    context.res = {\\n      status: 400,\\n      body: \\"Please pass the name of an owner and a repo in the request\\"\\n    };\\n  }\\n};\\n```\\n\\nJust for fun, we\u2019ll also add a [utils.js](https://github.com/tbarlow12/sls-az-func-rest-api/blob/master/src/utils.js) file for shared utility functions across handlers, and we\u2019ll put that just inside the `src` directory.\\n\\n```javascript\\n// src/utils.js\\n\\n/** Gets the param from either the query string\\n * or body of request\\n */\\nmodule.exports.getQueryOrBodyParam = (req, param) => {\\n  const { query, body } = req;\\n  if (query && query[param]) {\\n    return query[param];\\n  }\\n  if (body && body[param]) {\\n    return body[param];\\n  }\\n};\\n```\\n\\nYou\u2019ll also note that the handlers are using a popular NPM package for HTTP requests, `axios`. Run `npm install axios --save` in your service root directory.\\n\\n### Current Folder structure\\n\\n```\\nsls-az-func-rest-api\\n|-- src\\n    |-- handlers\\n        |-- issues.js\\n        |-- pulls.js\\n    |-- utils.js\\n|-- host.json\\n|-- package.json\\n|-- README.md\\n|-- serverless.yml\\n```\\n\\nNow we need to add our new handlers to the serverless configuration, which will now look like:\\n\\n```yaml\\nservice: sls-az-func-rest-api \\n \\nprovider:\\n  name: azure\\n  location: West US 2\\n \\nplugins:\\n  - serverless-azure-functions\\n \\npackage:\\n  exclude:\\n    - local.settings.json\\n    - .vscode/**\\n \\nfunctions:\\n  issues:\\n    handler: src/handlers/issues.handler\\n    events:\\n      - http: true\\n        x-azure-settings:\\n          authLevel: anonymous\\n  pulls:\\n    handler: src/handlers/pulls.handler\\n    events:\\n      - http: true\\n        x-azure-settings:\\n          authLevel: anonymous\\n```\\n \\n## Step 2.1: Test your API Locally\\n\\nRun the following command in your project directory to test your local service.\\n\\n```bash\\nsls offline\\n```\\n\\nThis will generate a directory for each of your functions with the file `function.json` in each of those directories. This file contains metadata for the \u201cbindings\u201d of the Azure function, and will be cleaned up when you stop the process. You shouldn\u2019t try to change the bindings files yourself, as they will be cleaned up and regenerated from `serverless.yml`. If you make changes to your `serverless.yml` file, you\u2019ll need to exit the process and restart. Changes to code, however, will trigger a hot reload and won\u2019t require a restart.\\n\\nHere is what you can expect as output when you run `sls offline`:\\n\\n![alt text](https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/azure+plugin+update/offline.png)\\n\\nWhen you see the \u201cHttp Functions\u201d in the log, you are good to invoke your local service.\\n\\n![alt text](https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/azure+plugin+update/urls.png)\\n\\nOne easy way to test your functions is to start up the offline process in one terminal, and then in another terminal, run:\\n\\n```bash\\nsls invoke local -f {functionName} -p {fileContainingTestData.json}\\n```\\n\\nLet\u2019s create a file with some sample data at the root of our project, and we\u2019ll just call it `data.json`:\\n\\n```json\\n{\\n  \\"owner\\": \\"serverless\\",\\n  \\"repo\\": \\"serverless-azure-functions\\"\\n}\\n```\\n\\nLuckily, `owner` and `repo` are the same parameters expected by both the `issues` and `pulls` handlers, so we can use this file to test both.\\n\\nWe\u2019ll keep our `offline` process running in one terminal. I\u2019ll open up another (pro tip: use the \u201cSplit Terminal\u201d in the VS Code integrated terminal), and run:\\n\\n```bash\\nsls invoke local -f pulls -p data.json\\n```\\n\\nHere\u2019s my output:\\n\\n![alt text](https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/azure+plugin+update/invokeLocal.png)\\n\\nYou can see that it made a `GET` request to the locally hosted API and added the info from `data.json` as query parameters. There are no restrictions on HTTP methods, you would just need to specify in the CLI if it\u2019s not a `GET`. (Example: `sls invoke local -f pulls -p data.json -m POST`)\\n\\nYou could also run a simple `curl` command that would accomplish the same thing:\\n\\n![alt text](https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/azure+plugin+update/curl.png)\\n\\nAnd here is the output in the terminal running the API. You can see our `console.log` statement from the handler output here:\\n\\n![alt text](https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/azure+plugin+update/handlerLog.png)\\n\\nWhen I\u2019m done running the service locally, I\u2019ll hit `Ctrl/Cmd + C` in the API terminal to stop the process. You can see that it cleans up those metadata files we discussed earlier:\\n\\n![alt text](https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/azure+plugin+update/cleanup.png)\\n\\n## Step 2.2: Deploy\\n\\n### Authentication\\n\\nThat\u2019s all the configuration we need, so we\u2019re ready to deploy this Function App. In order to deploy, we\u2019ll need to authenticate with Azure. There are two options for authentication: interactive login and a service principal (which, if you are unfamiliar, is essentially a service account). \\n\\nAt first, when you run a command that requires authentication, the Interactive Login will open up a webpage for you to enter a code. You\u2019ll only need to do this once. The authentication results are cached to your local machine. \\n\\nIf you have a service principal, you\u2019ll set the appropriate environment variables on your machine, and the plugin will skip the interactive login process. Unfortunately, if you\u2019re using a free trial account, your only option is a service principal. The process for creating one and setting up your environment variables is detailed in the [Azure plugin README](https://github.com/serverless/serverless-azure-functions#creating-a-service-principal).\\n\\n### Deploy Command\\n\\nWith configuration and authentication in place, let\u2019s ship this thing. From the root of your project directory, run:\\n\\n`sls deploy`\\n\\nand watch the magic happen. Your app will be packaged up into a `.zip` file, which will be located in the `.serverless` directory at the root of your project. From there, an Azure resource group will be created for your application, containing things like your storage account, Function App, and more. After the resource group is created, the zipped code will be deployed to your newly created function app and the URLs for your functions will be logged to the console.\\n\\n![alt text](https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/azure+plugin+update/deploy+(1).png)\\n\\n## Step 2.3 Invoke Deployed Function\\n\\nWe can invoke a deployed function in the same way we invoked our local function, just without the `local` command:\\n\\n```\\nsls invoke -f pulls -p data.json\\n```\\n\\n![alt text](https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/azure+plugin+update/invoke.png)\\n\\n## (Optional) Step 2.4: Cleanup\\n\\nIf you have been following this tutorial and would like to clean up the resources you deployed, you can simply run:\\n\\n```\\nsls remove\\n```\\n\\nBE CAREFUL when running this command. This will delete your entire resource group.\\n\\n## Additional Steps\\n\\nStay tuned for future posts walking you through other steps of setting up your service, including adding [API Management](https://azure.microsoft.com/en-us/services/api-management/) configuration, quality gates like linting and unit tests, adding Webpack support, CI/CD and more.\\n\\nAlso, if you\'re going to be at ServerlessConf 2019 in NYC, the Microsoft team is putting on a [Azure Serverless Hands-on Workshop](http://aka.ms/nycworkshop) on October 7th from 8:30 am to 5:00 pm.\\n\\n## Contributing\\n\\nWe\u2019re eager to get your feedback on the `serverless-azure-functions` plugin. Please [log issues on the GitHub repo with any bug reports or feature requests](https://github.com/serverless/serverless-azure-functions/issues/new/choose). Or better yet, fork the repo and open up a [pull request](https://github.com/serverless/serverless-azure-functions/pulls)! \\n","data":{"title":"How to Create a REST API with Azure Functions and the Serverless Framework - Part 1","date":"2019-09-17T00:00:00.000Z","path":"serverless-part1"},"isEmpty":false,"excerpt":""},"serverless-part2":{"content":"\\n#### Overview\\n\\n(_See the [original post here](https://serverless.com/blog/serverless-azure-functions-v2)._)\\n\\nNow that you\'ve created and deployed a basic API from [Part 1](https://serverless.com/blog/serverless-azure-functions-v1), let\'s take a few more steps towards making that API more resilient and secure. This post will still be based on the [example repo](https://github.com/tbarlow12/sls-az-func-rest-api), and will follow the same \\"commit-per-step\\" format as [Part 1](https://serverless.com/blog/serverless-azure-functions-v1), which contains Steps 1 and 2.\\n\\nTo pick up where we left off in the example repo (after having completed Step 2), run:\\n\\n```bash\\n# Assumes you\'ve already forked the repo\\n$ git clone https://github.com/<your-github-name>/sls-az-func-rest-api && git checkout cf46d1d\\n```\\n\\n#### Step 3: Add unit testing and linting - (commit [465ecfe](https://github.com/tbarlow12/sls-az-func-rest-api/commit/465ecfe04bda8d4d5ac7c9c5ce31557a8993408f))\\n\\nBecause this isn\'t a blog post on unit tests, linting or quality gates in general, I\'ll just share the tools that I\'m using and the quality gates that I added to the repository. Feel free to use them as stubs for your own future tests or lint rules.\\n\\nFor unit tests, I\'m using the [Jest](https://jestjs.io/) test runner from Facebook. I\'ve used it for several projects in the past and have never had any issues. Jest tests typically sit alongside the file they are testing, and end with `.test.js`. This is configurable within [`jest.config.js`](https://github.com/tbarlow12/sls-az-func-rest-api/commit/465ecfe04bda8d4d5ac7c9c5ce31557a8993408f#diff-2d0cd5d10b9604941c38c6aac608178a), which is found at the root of the project.\\n\\nBecause my code makes REST calls via `axios`, I\'m using the `axios-mock-adapter` to mock the request & response. The tests that I wrote ([issues.test.js](https://github.com/tbarlow12/sls-az-func-rest-api/commit/465ecfe04bda8d4d5ac7c9c5ce31557a8993408f#diff-fb5daf13ab24c55eef4f041fc89c5025) and [pulls.test.js](https://github.com/tbarlow12/sls-az-func-rest-api/commit/465ecfe04bda8d4d5ac7c9c5ce31557a8993408f#diff-29c6cbdb5c35cdd4da7f67589ae7121a)) run some simple checks to make sure the correct URLs are hit and return the expected responses.\\n\\nFor linting, I\'m using [ESLint](https://eslint.org) with a very basic configuration, found in [`.eslintrc.json`](https://github.com/tbarlow12/sls-az-func-rest-api/commit/465ecfe04bda8d4d5ac7c9c5ce31557a8993408f#diff-df39304d828831c44a2b9f38cd45289c). To run a lint check, you can run:\\n\\n```bash\\n$ npm run lint\\n```\\n\\nMany errors can be fixed automatically with:\\n\\n```bash\\n$ npm run lint:fix\\n```\\n\\nRun your tests with:\\n\\n```bash\\n$ npm test\\n```\\n\\nFor more details, take a look at the [commit in the example repo](https://github.com/tbarlow12/sls-az-func-rest-api/commit/465ecfe04bda8d4d5ac7c9c5ce31557a8993408f) or check out the commit locally\\n\\n```bash\\n$ git checkout 465ecfe\\n```\\n\\n#### Step 4: Add basic API Management Configuration - (commit [c593308](https://github.com/tbarlow12/sls-az-func-rest-api/commit/c593308efc5a60e2701ec97122564592072080e2))\\n\\nThis was one of the first features we implemented into the `v1` of the `serverless-azure-functions` plugin. because most Azure Function Apps are REST APIs, and it\'s hard to have a real-world API in Azure without [API Management](https://azure.microsoft.com/en-us/services/api-management/).\\n\\nIf you have no special requirements for API Management, the plugin will actually generate the default configuration for you if you just include:\\n\\n```yaml\\n...\\nprovider:\\n    ...\\n    apim: true\\n```\\n\\nThat\'s exactly what I did for [Step 4](https://github.com/tbarlow12/sls-az-func-rest-api/commit/c593308efc5a60e2701ec97122564592072080e2). Also, because we want API Management to be the only entry point for our API endpoints, I also changed each function\'s `authLevel` to `function`. This requires a function-specific API key for authentication. You can see in the screenshot what happens in the first command, when I try to `curl` the original function URL. I get a `401` response code. But when I hit the URL provided by API Management, I get the response I expect:\\n\\n![alt text](https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/azure-functions-part2/apim_curl.jpg)\\n\\nFor more details on `authLevel`, check out the [trigger configuration docs](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-http-webhook#trigger---configuration).\\n\\n\\n###### Consumption SKU\\n\\nOne important thing to note is that the API Management configuration will default to the `consumption` SKU, which [recently went GA](https://azure.microsoft.com/en-ca/updates/azure-api-management-consumption-tier-is-now-generally-available/). For now, the only regions where `Consumption` API Management is allowed are:\\n\\n- North Central US\\n- West US\\n- West Europe\\n- North Europe\\n- Southeast Asia\\n- Australia East\\n\\nIf you are deploying to a region outside of that list, you will need to specify a different SKU (`Developer`, `Basic`, `Standard` or `Premium`) within the `apim` configuration, which will be demonstrated in the next section.\\n\\n###### Deploy your updates:\\n\\n```bash\\n$ sls deploy\\n```\\n\\n#### Step 5: Add more advanced API Management Configuration - (commit [38413a0](https://github.com/tbarlow12/sls-az-func-rest-api/commit/38413a03100a65c423dc18ab47754471a4c6f245))\\n\\nIf you need a few more knobs to turn when configuring your API Management instance, you can provide a more verbose configuration. Here is the verbose config I added to the sample repo (the `...` means the rest of the config for that section stayed the same):\\n\\n```yaml\\nservice: sls-az-func-rest-api\\n\\nprovider:\\n  ...\\n  apim:\\n    apis:\\n      - name: github-api\\n        # Require an API Key if true\\n        subscriptionRequired: false\\n        displayName: Github API\\n        description: The GitHub API\\n        protocols:\\n          - https\\n        # Defaults to /api\\n        path: github\\n        # Azure resource tags\\n        tags:\\n          - apimTag1\\n          - apimTag2\\n        authorization: none\\n    backends:\\n      - name: github-backend\\n        url: api/github\\n    cors:\\n      allowCredentials: false\\n      allowedOrigins:\\n        - \\"*\\"\\n      allowedMethods:\\n        - GET\\n        - POST\\n        - PUT\\n        - DELETE\\n        - PATCH\\n      allowedHeaders:\\n        - \\"*\\"\\n      exposeHeaders:\\n        - \\"*\\"\\n...\\n\\nfunctions:\\n  issues:\\n    ...\\n    apim:\\n      api: github-api\\n      backend: github-backend\\n      operations:\\n        - method: get\\n          urlTemplate: /issues\\n          displayName: GetIssues\\n  pulls:\\n    ...\\n    apim:\\n      api: github-api\\n      backend: github-backend\\n      operations:\\n        - method: get\\n          urlTemplate: /pulls\\n          displayName: GetPullRequests\\n```\\n\\nIf you did not want the `Consumption` SKU of API Management, you would need to have a verbose configuration and specify the `sku` as:\\n\\n```yaml\\nprovider:\\n  ...\\n  apim:\\n    ...\\n    sku:\\n      name: {Consumption|Developer|Basic|Standard|Premium}\\n```\\n\\nThe example just uses the default and deploys to region(s) where Consumption API Management is currently available.\\n\\n###### Deploy your updates:\\n\\n```bash\\n$ sls deploy\\n```\\n\\n#### (Optional) Step 5.1: Revert back to basic API Management configuration - (commit [4c5803f](https://github.com/tbarlow12/sls-az-func-rest-api/commit/4c5803f1e5adf21befbeac8e91cac4552b4f9c1c))\\n\\nTo make the demo simple and easy to follow, I\'m going to revert my `apim` configuration back to the defaults:\\n\\n```yaml\\napim: true\\n```\\n\\nYou might be able to do the same, depending on your requirements.\\n\\n#### Step 6: Add Webpack configuration - (commit [1aefac7](https://github.com/tbarlow12/sls-az-func-rest-api/commit/1aefac7e5ed99db009632724c6a70c9cb3d29bf8))\\n\\n[Webpack](https://webpack.js.org/) dramatically reduces the packaging time as well as the size of your deployed package. After making these changes, your packaged Function App will be optimized with Webpack (You can run `sls package` to package it up or just run `sls deploy` which will include packaging as part of the lifecycle).\\n\\nJust as an example, even for this very small application, my package size went from **324 KB** to **28 KB**. \\n\\nTo accomplish this, we\'ll use another awesome Serverless plugin, [`serverless-webpack`](https://github.com/serverless-heaven/serverless-webpack) to make Webpacking our Azure Function app really easy.\\n\\nFirst thing you\'ll want to do, assuming you\'re working through this tutorial in your own git repository, is add the generated Webpack folder to your `.gitignore`\\n\\n```yaml\\n# .gitignore\\n...\\n# Webpack artifacts\\n.webpack/\\n```\\n\\nNext, we\'ll need to install 3 packages from npm:\\n\\n```bash\\n$ npm i serverless-webpack webpack webpack-cli --save-dev\\n```\\n\\nThen we\'ll add the plugin to our `serverless.yml`:\\n\\n```yaml\\nplugins:\\n  - serverless-azure-functions\\n  - serverless-webpack\\n```\\n\\nAnd then copy this exact code into `webpack.config.js` in the root of your service directory:\\n\\n```javascript\\nconst path = require(\\"path\\");\\nconst slsw = require(\\"serverless-webpack\\");\\n\\nmodule.exports = {\\n  entry: slsw.lib.entries,\\n  target: \\"node\\",\\n  output: {\\n    libraryTarget: \\"commonjs2\\",\\n    library: \\"index\\",\\n    path: path.resolve(__dirname, \\".webpack\\"),\\n    filename: \\"[name].js\\"\\n  },\\n  plugins: [],\\n};\\n```\\nAnd just like that, your deployed Azure Function apps will be webpacked and ready to go.\\n\\n![alt text](https://media.giphy.com/media/zcCGBRQshGdt6/giphy.gif)\\n\\n#### Step 7: Enable Serverless CLI configuration - (commit [4cb42fd](https://github.com/tbarlow12/sls-az-func-rest-api/commit/4cb42fdf17d7793a3ac9660bb43f28e8fe2d46d5))\\n\\nIf you\'re running a real-life production service, you will most likely be deploying to multiple regions and multiple stages. Maybe merges to your `dev` branch will trigger deployments to your `dev` environment, `master` into `prod`, etc. I\'ll show you an example of that in Step 8. To accomplish CLI-level configurability, we need to make a few changes `serverless.yml`.\\n\\n```yaml\\nprovider:\\n  region: ${opt:region, \'West US\'}\\n  stage: ${opt:stage, \'dev\'}\\n  prefix: ${opt:prefix, \'demo\'}\\n```\\n\\nAs you might have guessed, the values `West US`, `dev` and `demo` are my default values. If I wanted to deploy my service to `North Central US` and `West Europe`, but keep everything else the same, I would run:\\n\\n```bash\\n$ sls deploy --region \\"North Central US\\"\\n$ sls deploy --region \\"West Europe\\"\\n```\\n\\nWe could do similar operations with `--prefix` and `--stage`. Now let\'s create a pipeline that actually does this.\\n\\n#### Step 8: Add CI/CD (with Azure DevOps) - (commit [a8fabf6](https://github.com/tbarlow12/sls-az-func-rest-api/commit/a8fabf6faa30f7ceab7c18395a5c69c21abd4640))\\n\\nFor the CI/CD on my sample repo, I\'m using [Azure DevOps](), but it would work the same on any other service you want to use. If you want to use Azure DevOps for an open-source project, [here are a few steps to get started](https://docs.microsoft.com/en-us/azure/devops/organizations/public/about-public-projects?view=azure-devops#get-started-with-a-public-project)\\n\\nNo matter the CI/CD environment, here is what we are looking to accomplish:\\n\\n1. Install dependencies\\n2. Validate the changes (run quality gates)\\n3. Deploy the service\\n\\nThese steps can all be accomplished in just a few CLI commands. At bare minimum, we\'ll want to run something like:\\n\\n```bash\\n# Clean install\\nnpm ci\\n# Runs tests and linting\\nnpm test\\n# Serverless not contained within dev dependencies to avoid conflicts\\n# because most users have it installed globally on their dev machine\\nnpm i serverless -g\\n# Deploy service\\nsls deploy\\n```\\n\\nThere are a lot more bells and whistles we could add, but that\'s essentially what it boils down to. Of course, we\'ll need authentication in whatever system we\'re deploying from, and that\'s where the [service principal](https://github.com/serverless/serverless-azure-functions#creating-a-service-principal) will come in. I\'ll show you how to use the service principal in the `deploy.yml` pipeline below.\\n\\nFor my pipelines, I\'m actually going to split up my CI and CD into `unit-tests.yml` and `deploy.yml`. Unit tests will be run on PRs into `master` or `dev` (this is assuming there are branch policies in place to prevent devs from pushing straight to either branch). Deployment will be run on commits (merges) to `master`.\\n\\n##### Unit Tests\\n```yaml\\n# pipelines/unit-tests.yml\\n\\n# Only run on Pull Requests into `master` or `dev`\\npr:\\n  branches:\\n    include:\\n    - master\\n    - dev\\n\\n# Run pipeline on node 8 and 10 on Linux, Mac and Windows \\nstrategy:\\n  matrix:\\n    Linux_Node8:\\n      imageName: \'ubuntu-16.04\'\\n      node_version: 8.x\\n    Linux_Node10:\\n      imageName: \'ubuntu-16.04\'\\n      node_version: 10.x\\n    Mac_Node8:\\n      imageName: \'macos-10.14\'\\n      node_version: 8.x\\n    Mac_Node10:\\n      imageName: \'macos-10.14\'\\n      node_version: 10.x\\n    Windows_Node8:\\n      imageName: \'win1803\'\\n      node_version: 8.x\\n    Windows_Node10:\\n      imageName: \'win1803\'\\n      node_version: 10.x\\n\\n# https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops#use-a-microsoft-hosted-agent\\npool:\\n  vmImage: $(imageName)\\n\\nsteps:\\n- task: NodeTool@0\\n  inputs:\\n    versionSpec: $(node_version)\\n  displayName: \'Install Node.js\'\\n\\n# Make pipeline fail if tests or linting fail, linting occurs in `pretest` script\\n- bash: |\\n    set -euo pipefail\\n    npm ci\\n    npm test\\n  displayName: \'Run tests\'\\n```\\n\\n##### Deployment\\n```yaml\\n# pipelines/deploy.yml\\n\\ntrigger:\\n  branches:\\n    include:\\n    - master\\n\\n# https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azure-devops&tabs=yaml\\nvariables:\\n- group: sls-deploy-creds\\n\\njobs:\\n\\n- job: \\"Deploy_Azure_Function_App\\"\\n  timeoutInMinutes: 30\\n  cancelTimeoutInMinutes: 1\\n\\n  pool:\\n    vmImage: \'ubuntu-16.04\'\\n\\n  steps:\\n  - task: NodeTool@0\\n    inputs:\\n      versionSpec: 10.x\\n    displayName: \'Install Node.js\'\\n\\n  - bash: |\\n      npm install -g serverless\\n    displayName: \'Install Serverless\'\\n    # Deploy service with prefix `gh`, stage `prod` and to region `West Europe`\\n  - bash: |\\n      npm ci\\n      sls deploy --prefix gh --stage prod --region \\"West Europe\\"\\n    env:\\n      # Azure Service Principal. Secrets need to be mapped here\\n      # USE THIS EXACT TEXT, DON\'T COPY/PASTE YOUR CREDENTIALS HERE.\\n      # Azure DevOps will use the variables within\\n      # the variable group `sls-deploy-creds` to replace all the $() values\\n      AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)\\n      AZURE_TENANT_ID: $(AZURE_TENANT_ID)\\n      AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)\\n      AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)\\n    displayName: \'Deploy Azure Function App\' \\n```\\n\\nNotice [this line](https://github.com/tbarlow12/sls-az-func-rest-api/blob/master/pipelines/deploy.yml#L30) in the deployment pipeline that leverages our setup from Step 7. You might have multiple pipelines for the different stages, you might dynamically infer these values from the branch name or you might just provide the values as environment variables. The point of the setup in Step 7 was to provide you the flexibility to deploy your service to wherever you see fit at the time, without needing to change your `serverless.yml` file.\\n\\n#### Concluding Thoughts\\n\\nA big part of our reason for investing time and effort into the `serverless-azure-functions` plugin was so that developers could easily deploy Azure Functions to solve more real-world, business-level scenarios. We hope that as you use the tool and discover areas for improvement that you\'ll [file issues on the repo](https://github.com/serverless/serverless-azure-functions/issues/new/choose) or even open up a [pull request](https://github.com/serverless/serverless-azure-functions/pulls).\\n","data":{"title":"How to Create a REST API with Azure Functions and the Serverless Framework - Part 2","date":"2019-10-1","path":"serverless-part2"},"isEmpty":false,"excerpt":""},"thedifference":{"content":"\\nWe\'ve all been there. Talking with old friends or new acquaintances about your career as a software engineer, and those magical words pop into the conversation: \\"_Bro... I have an idea for this app..._\\" Much to the surprise and chagrin of many aspiring Zuckerbergs, success comes from a heck of a lot more than just a good idea.\\n\\nMy purpose here is not to disparage any idea. I think some of the best ideas in the world are those that sound insane from the start. My purpose is to reflect on one of my own experiences and use it to identify some of the things that separate the successful ideas from... well... the others.\\n\\n![alt text](/images/kramer.gif)\\n\\nThis experience I\'m talking about was a time that I was able to witness the end-to-end process of an idea becoming a success. It started similarly to the other experiences I referenced in the beginning of this post - a friend came to me with an idea, and an ambitious one at that. \\n\\n_(cue [flashback music from \\"Arthur\\"](https://www.youtube.com/watch?v=KSm377MSv7Y))_\\n\\n## The Idea\\n\\nIt was April of 2016. I was just about to finish one of the most difficult semesters I\'d had to date. I was trying to understand Turing machines, Database relational algebra, and every sorting algorithm ever made since the caveman stacked the biggest rocks at the bottom. For those of you who haven\'t experienced this, just imagine you\'re drowning... You cry out for help, hoping someone is close enough hear you... But the only response you get is from your terminal: `Segmentation fault`. \\n\\nIn the heat of the confusion, rage and tears, this friend approached me with an idea to create the biggest hackathon in the state of Utah. He wanted it to happen in the upcoming semester (in 5 months) and that he wanted me to help him do it. \\n\\nAt the time, I thought, _\\"**How** could we ever do that? **Where** would we even find the time? **Why** put more on our plate than we already have?\\"_ \\n\\nIt\'s safe to say I had my doubts. But after thinking about it for a few days, I thought it sounded kind of fun and that I\'d join him. He recruited a few of our other classmates that were either crazy enough to say \\"yes\\" or too scared to tell him \\"no.\\" We had ourselves a team.\\n\\n## The Team\\n\\nOur first official meeting was a few weeks later, and was actually a video conference, as several of us were working at internships in different states. We jumped on the call and realized that none of us really knew any of the others, except for this friend that had pulled us into this. We weren\'t anti-social, but we each had our own spheres and didn\'t often venture outside them. \\n\\nI thought to myself, \\"This is quite possibly the most random possible sampling of students in the University of Utah Computer Science program...\\" Looking back, I realize that these were some of the first indications of differences between this idea and many of the others I\'d heard:\\n- **Assemble a *diverse* team** - Seriously, we could have been a poster for a University marketing campaign. We had just about every demographic covered. But diversity became much more than a box to check. A team with different backgrounds, perspectives, connections and opinions would become crucial to the success of the hackathon.\\n- **Find the *right* people** - Rather than just pick his friends, he went out and picked people that would be right for each job and helped them catch the vision. I\'m not saying the people on the team weren\'t his friends, but I think it\'s easy to fall into the trap of just defaulting to your circle of closest friends, even if they\'re not right for the job.\\n\\n## The Sacrifice\\n\\nI\'ll never forget the day we went to ASUU (Associated Students of the University of Utah), our school\'s student government, to ask for their financial sponsorship of our event. We came on a day where other clubs and student groups were being grilled by the student-legislators over requests in the $50-$100 range. We were coming in asking for $3,000. \\n\\nBut not only did we believe this event would be fun and impactful for each of the participants personally, we strongly felt it would benefit the University and the community in the long run. \\n\\nBig hackathons were starting to become one of the ways students from other schools in and out of the state were exposed to universities, and many of them would eventually plan on going to graduate school. We felt that if we could just give these students a chance to see what it\'s like to be at the University of Utah, more would consider the U for future educational opportunities.\\n\\nThese hackathons are also *major* opportunities for companies to recruit potential candidates (hence the corporate sponsors that shelled out $$$ for a booth at the event and their logo on our materials and website). If we could host a large event where students from around the state and country could get face time with local companies, it was possible that many of those participants would receive job offers, work in the area, and boost the local economy. \\n\\nSo, yes, $3000 from the University seemed like a lot up front, but we felt like the investment would pay for itself many times over.\\n\\nWhen we got up to pitch the idea to this group of our peers, many of them caught the vision, but there were also some that just couldn\'t get over the amount of money we were asking for. \\n\\nOne of them posed the question, *\\"What will you do if you don\'t get the money?\\"*\\n\\nMy friend answered without hesitation, *\\"It will come out of my own pocket. I believe in this cause and it\'s something I\'m willing to pay for if we don\'t get the funding.\\"* I was as surprised as each of them. Which brings me to the next difference:\\n\\n- **Be willing to make *real* sacrifices** - It\'s not like he was made of money, either. He worked long hours at the hospital, but he also paid for his own education. In my mind, he was offering more than what seemed \\"reasonable\\" to the rest of us. A sacrifice is more than just giving up something. It\'s something that actually *hurts* that you do anyway because of your belief in a cause. He believed in the cause and was willing to hurt for it.\\n\\n## The Work\\n\\nWe each went about our duties, as busy as we were. We did our best to attend weekly meetings on our progress, where we\'d identify any blockers and discuss solutions. It was *a lot* of work for everyone involved.\\n\\nWe had team members over categories like Marketing, Social Media, Hospitality, Sponsorship, and others. I was the Director of Technology, which meant I would be responsible for the hardware lab, coordinating the schedule and tasks for all of our volunteers and oversee any technical mentoring that was needed.\\n\\nHowever, when it came time for the event, even though we still each owned our piece of the pie, we all pitched in to help each other and make it happen. This was something I\'d read from the great [John Wooden](/woodeinisms/), but that was reinforced in working with this team:\\n \\n- **\\"It is amazing how much can be accomplished if no one cares who gets the credit.\u201d** - No one was above helping anyone else with any activity. We all did our best to operate as a team rather than just make sure our own responsibilities were covered. We all did everything from setting up chairs to serving snacks to running games to renting hardware to schmoozing sponsors and everything else in between.\\n\\n\\n## The Iteration\\n\\nAfter a successful hackathon with very few hiccups, I thought we had earned a well-deserved rest. I was sure there were a few complaints here or there from participants and sponsors alike, but hey, in an event with 180+ participants and ~15 sponsors several employees each, there was bound to be at least _some_ whining. \\n\\nIt wasn\'t that I didn\'t care, I just thought we had a little bit of time before we needed to worry about it again. My friend felt differently. After the feedback survey came back, he personally spoke with each sponsor, apologizing if necessary for any inconvenience and pledging to make the changes for the next year. I watched as those items of feedback tormented him over the next year, giving each one a great deal of time and attention, making sure no one would be able to raise that complaint again.\\n\\nIn other words, he made this idea different by: \\n\\n- **Not only accepting, but *seeking* honest feedback** - It wasn\'t enough to pat himself on the back for a job well done and rest up. He *needed* to address the issues to make the next event  *perfect*. He didn\'t want to waste any time in pursuit of that goal.\\n\\n## The Rest of the Story\\n\\nWe did address those issues and prepare for the next year\'s Hackathon. Our team locked down a title sponsor that gave us over $12,000 on top of many of our sponsorships from the previous year. Because of the event\'s success, they actually signed a contract to remain the title sponsor over the next 3 years, increasing the donation by 20% each year. \\n\\nWe had over 260 participants that created some amazing products, one of which was a robot that used Tensorflow to learn a participants preferences in girls and used a stylus to swipe left or right on his Tinder application.\\n\\nMy friend, [Johnny Le](https://johnnyle.me/), went on to win an [award](http://dailyutahchronicle.com/2018/05/21/ideas-are-only-worth-what-you-make-of-them-u-student-starts-utahs-largest-hackathon/) given to one student each year for student leadership that resulted in a $2,000 cash award and a $10,000 donation to the student organization of his choice (guess which organization he gave it to). \\n\\nI sincerely hope that none of what I have said comes across as hyperbole or sugar-coated. Like all teams and projects, we had our issues and problems. Even Johnny, as great a guy as he is, makes mistakes. I\'m also not saying that these are the only things one needs to do in order to be successful at any given task. I don\'t pretend to know the secret sauce to success - I\'m still trying to find it myself.\\n\\nBut [HackTheU](https://hacktheu.com/) didn\'t end up in the \\"Good Idea Graveyard\\" because Johnny and our team treated it differently. I had a front row seat to watch some amazing individuals come together, take collective ownership of a good idea and make it happen through initiative, sacrifice, humility and the unglamorous, frustrating, seemingly never-ending **work**.\\n\\n*\\"You wonder how they do it <br>\\nAnd you look to see the knack<br>\\nYou watch the foot in action,<br>\\nOr the shoulder or the back,<br>\\nBut when you spot the answer<br>\\nWhere the higher glamours lurk<br>\\nYou\u2019ll find in moving higher<br>\\nUp the laurel covered spire<br>\\nThat most of it is practice<br>\\nAnd the rest of it is work\\"<br>\\n -Grantland Rice*","data":{"title":"The Difference - What Makes an Idea Work","date":"2018-6-15","path":"thedifference"},"isEmpty":false,"excerpt":""},"twenty-questions":{"content":"\\nHi, I\'m Tanner Barlow. I\'m a software engineer on the Commercial Software Engineering team at Microsoft. I grew up in Salt Lake City, Utah, where I also attended school at the University of Utah (Go Utes!). I majored in Computer Science and helped start the school\'s first ever hackathon, HackTheU, with a few of my friends. I was asked to answer 20 questions regarding my experience working at Microsoft and what it\'s like to live in the great Pacific Northwest. If either of these topics interest you (primarily the first), read on.\\n\\n## 1.\\tHow are using Microsoft as a platform from your passions?\\n\\nI get to work on some pretty cool open-source projects at work. I get to work on a broad range of technologies and tools, spanning the stack. Our team does some traveling, so I bring my family on a lot of my work trips and often extend my stay to explore the different parts of the world we visit. We meet and work alongside other software engineers from all over the world. Our management encourages 20% projects (relevant side projects you work on with 20% of your time), some of which have actually evolved into open-source projects that we\u2019ve worked on and contributed to. I\'ve been able to attend a few conferences (our team sends us to one conference per year if we want to go).\\n\\n## 2.\\tWhat is your favorite building on campus and why?\\n\\nThe Mixer \u2013 basically any kind of food you could want and a basketball court right outside. \\n\\n## 3.\\tWhat\'s the most challenging part of your job?\\n\\nConstant change and needing to learn radically different tools & technologies in a short period of time. Our team works on a pretty broad range of stuff. For example, in the last year, I went from working on Cloud Custodian (Python) to working on VoTT (TypeScript, Electron, React) to working on the Azure Functions plugin for the Serverless Framework (TypeScript, Node) with a few small projects sprinkled in between.\\n\\n## 4. Myth or Not: Do you have to be an intern to secure a full-time role? \\n\\nMYTH. Of the 10 members on my team, 2 of us were interns at Microsoft. I loved my experience for two summers as an intern at Microsoft, but it\'s definitely not a requirement.\\n\\n## 5. Interview Prep 101, what is the best resource you would recommend?\\n\\nCracking the Coding Interview + LeetCode + Pramp\\n\\n## 6.\\tWhat\'s one piece of career/personal advice you\'d give you your younger self?\\n\\nGet up early and get things done before the rest of the day makes demands on your time. The first hour of my day is reserved for only the most important things, and it makes the rest of my day go so much better.\\n\\n## 7.\\tWhat are ways that you feel empowered to give back to communities and how? \\n\\nThe donation matching + volunteer time matching ($25/hr) from Microsoft is an amazing benefit that I\u2019ve used to give back to a local Boy Scout troop I\u2019ve volunteered with.\\n\\n## 8. How did you decide to work at MSFT vs. another company? \\n\\nMSFT seemed more family-friendly than most of the companies I was interviewing with (I\'m writing this in the middle of my 12 weeks of paternity leave). I felt like I could really grow in CSE, and I felt like there were a lot of people around me that would help me learn. Microsoft is huge, and I like the flexibility of being able to switch what I\'m working on without leaving the company (Not happening any time soon, CSE is way too much fun). I also really identified with the vision of \u201cempowering others\u201d from Microsoft\'s mission statement.\\n\\n## 9. Who are your mentors? How did you select/build a relationship with mentor?  \\n\\nI have several mentors, but as I mentioned above, one of the reasons I picked Microsoft (and specifically, CSE) was because I felt like there were a lot of engineers that were willing and able to teach me. I get to work side by side with some of the smartest software engineers I\'ve met, and I\'ve learned a lot from them. One of my mentors is a manager on a peer team. We met on his first day joining the group at Microsoft\'s annual company-wide hackathon, and at the time, I was still trying to decide on whether or not to rejoin Microsoft after graduating. He gave me some sage wisdom and taught me more in those 3 days of coding side-by-side than I had learned in weeks of working in my day job. I decided that if I can work with people like that every day, that\'s a place I want to be. Since joining the team, we grab coffee (or hot chocolate for us non-coffee drinkers) every 2-3 weeks to chat about whatever\u2019s going on in work and in life. He\'s got a lot of experience and knowledge to share, and I\'m grateful to be able to benefit from it. Other mentors include my parents, church leaders and previous managers from my intern days at MSFT.\\n\\n## 10. In a quick snapshot, what do you do?\\n\\nSimply put, I write code with dev teams of Microsoft partners. For 3-5 months, our team pairs up with one of their dev teams and solve whatever interesting problem they are confronting at the time. This usually includes traveling to wherever they are in the world at least once. Because these companies all use some open-source tooling at some place in their stack, we do a lot of work on strategic open-source projects to support these efforts.\\n\\n## 11. In your mind, what makes a great software engineer?\\n\\nGrit, resourcefulness and humility. With those three things, most of the other skills can be acquired over time.\\n\\n## 12. What does a typical day look like as a software engineer? How much time do you spend coding? In meetings? etc. What is the size of your team? How does your manager contribute to your overall success? \\n\\nMy day starts early, I usually roll into the office around 5:45. I save the first few precious hours of solitude in the office strictly for writing, reading and reviewing code. The rest of my team trickles in throughout the morning, and we\'ll usually have standup around 10. These standup calls are often conference calls with another dev team somewhere else in the world, so that may be adjusted depending on their time zone. Aside from standup, there\'s usually one or two other meetings at some point throughout the day, and we do a lot of impromptu meetings to discuss design or feedback from a code review. Our team has 10 engineers, but we\u2019re often split in 2 or 3 squads depending on the projects we have going at the time. My manager is actually right there in the weeds with us \u2013 coding alongside us just like other devs on the team. He does a great job of making sure we all have opportunities to stretch and grow.\\n\\n## 13. Can you give me more insight into internal mobility? (i.e. how common is it to move teams, how did you do it? Does the power of networking really work?) \\n\\nI worked as an intern in the Windows organization for 2 years, and joined this team when I came on full-time. Not a difficult change, I just talked to a manager a few times and did the OneWeek hackathon with him and a few others on his team to see if it would be a good fit. It was \ud83d\ude0a\\n\\n## 14. If you were a former intern, what was your intern project?\\n\\nI interned for two summers, and my projects were 1) Automating identification of actionable feedback from Windows users using an internal NLP tool and 2) K-means clustering pipeline of windows users based on telemetry received from their machine.\\n\\n## 15. If you weren\u2019t a Software Engineer/Program Manager, what would you be?\\n\\nEither the Assistant to the Regional Manager of a local paper supply company or an architect at Vandelay Industries.\\n\\n## 16. What is your favorite caf\xe9/restaurant in the Seattle area?\\n\\nWell, we live in Everett, so I\'ll go with Chops (Bulgorrito\u2026 It\u2019s exactly what it sounds like)\\n\\n## 17. What is something that you do outside of work to re-energize?\\n\\nCook with my wife, play basketball with my friends, play with my 2 sons (ages 2 and 1 week), binge watch The Office or Parks and Rec.\\n\\n## 18. Describe your ideal day in Seattle?\\n\\nSummer day on the beach (probably Jetty Island) with my family. Ride the bus into Seattle for a Mariners game, complete with a Seattle dog, garlic fries and post-game fireworks\\n\\n## 19. What\'s your favorite way to eat a potato?\\n\\nSliced up and fried into 3-5 inch cubic strands of pure goodness. Otherwise known as french fries. Preferably next to a burger. Preferably from Dick\u2019s drive in\\n\\n## 20. If you had a superpower, what would it be and why?\\n\\nSleep Manipulation (think Mantis from Avengers) so that I could make my kids sleep when they\'re supposed to. Either that or flight.","data":{"title":"20 Questions - Working at Microsoft","date":"2019-10-15T00:00:00.000Z","path":"twenty-questions"},"isEmpty":false,"excerpt":""},"woodenisms":{"content":"\\nJohn Wooden was not only one of the greatest coaches of all-time (10 National Championships in 12 seasons at UCLA, 7 of those consecutive) and a great human being, but he had a gift with words. His many one-liners and famous sayings have since become known as \\"Woodenisms.\\" Here are some of my favorites:\\n\\n## Top 10\\n\\n1. *\\"Be **quick**, but **don\'t hurry**\\"*\\n\\n2. *\\"Time lost is time lost. It\u2019s gone forever. Some people tell themselves that they will work twice as hard tomorrow to make up for what they did not do today. People should always do their best. If they work twice as hard tomorrow, then they should have also worked twice as hard today. That would have been their best.\\"*\\n\\n3. *\\"Do not permit what you **cannot** do interfere with what you **can** do.\\"*\\n\\n4. *\\"If I am through learning, I am through.\\"*\\n\\n5. *\\"It is what you learn after you know it all that counts.\\"*\\n\\n6. *\\"Tell the truth. That way you don\u2019t have to remember a story.\\"*\\n\\n7. *\\"Being average means you are as close to the bottom as you are to the top.\\"*\\n\\n8. *\\"Don\u2019t measure yourself by what you\u2019ve accomplished, but rather by what you should have accomplished with your abilities.\\"*\\n\\n9. *\\"If you\u2019re not making mistakes, then you\u2019re not doing anything. I\u2019m positive that a doer makes mistakes.\\"*\\n\\n10. *\\"You can\u2019t live a perfect day without doing something for someone who will never be able to repay you.\\"*\\n\\n## Honorable Mentions\\n- *\\"If you keep too busy learning the tricks of the trade, you may never learn the trade.\\"*\\n\\n- *\\"Let\u2019s face it, we\u2019re all imperfect and we\u2019re going to fall short on occasion. But we must learn from failure and that will enable us to avoid repeating our mistakes. Through adversity, we learn, grow stronger, and become better people.\\"*\\n\\n- *\\"Happiness begins where selfishness ends.\\"*\\n\\n- *\\"Never make excuses. Your friends don\u2019t need them and your foes won\u2019t believe them.\\"*\\n\\n- *\\"You cannot live a perfect day without doing something for another without thought of something in return.\\"*\\n\\n- *\\"We almost have to force or drive ourselves to work hard if we are to reach our potential. If we don\u2019t enjoy what we do, we won\u2019t be able to push as hard as we need to push for as long as we need to push to achieve our best. However, if we enjoy what we do and if we\u2019re enthusiastic about it, we\u2019ll do it better and come closer to becoming the best we can be.\\"*\\n\\n- *\\"Time spent getting even would be better spent getting ahead.\\"*\\n\\n- *\\"Have character; don\'t be one.\\"*\\n\\n- *\\"The worst thing about new books is that they keep us from reading the old ones.\\"*\\n\\n- *\\"Never mistake activity for achievement.\\"*","data":{"title":"Favorite Woodenisms","date":"2017-10-12T00:00:00.000Z","path":"woodenisms"},"isEmpty":false,"excerpt":""}}')},38:function(e){e.exports=JSON.parse('[{"content":"","data":{"title":"My Software Dev Bucket List","date":"2018-8-31","path":"bucketlist"},"isEmpty":false,"excerpt":""},{"content":"","data":{"title":"Joining Microsoft","date":"2018-6-1","path":"joiningmicrosoft"},"isEmpty":false,"excerpt":""},{"content":"","data":{"title":"Microsoft - Summer 2016","date":"2016-9-2","path":"microsoft2016"},"isEmpty":false,"excerpt":""},{"content":"","data":{"title":"I Wiped Our Entire Azure Subscription...","date":"2019-10-4","path":"mistakes"},"isEmpty":false,"excerpt":""},{"content":"","data":{"title":"NBA Position Clustering","date":"2017-4-8","path":"nbaclustering"},"isEmpty":false,"excerpt":""},{"content":"","data":{"title":"Top 5 (unordered) Learnings from PyCon 2019","date":"2019-5-6","path":"pycon2019"},"isEmpty":false,"excerpt":""},{"content":"","data":{"title":"How to Create a REST API with Azure Functions and the Serverless Framework - Part 1","date":"2019-09-17T00:00:00.000Z","path":"serverless-part1"},"isEmpty":false,"excerpt":""},{"content":"","data":{"title":"How to Create a REST API with Azure Functions and the Serverless Framework - Part 2","date":"2019-10-1","path":"serverless-part2"},"isEmpty":false,"excerpt":""},{"content":"","data":{"title":"The Difference - What Makes an Idea Work","date":"2018-6-15","path":"thedifference"},"isEmpty":false,"excerpt":""},{"content":"","data":{"title":"20 Questions - Working at Microsoft","date":"2019-10-15T00:00:00.000Z","path":"twenty-questions"},"isEmpty":false,"excerpt":""},{"content":"","data":{"title":"Favorite Woodenisms","date":"2017-10-12T00:00:00.000Z","path":"woodenisms"},"isEmpty":false,"excerpt":""}]')},74:function(e,t,n){e.exports=n(210)},79:function(e,t,n){},80:function(e,t,n){},81:function(e,t,n){}},[[74,1,2]]]);
//# sourceMappingURL=main.41069f6c.chunk.js.map